This is gnutls.info, produced by makeinfo version 6.5 from gnutls.texi.

This manual is last updated 3 January 2019 for version 3.6.8 of GnuTLS.

Copyright (C) 2001-2019 Free Software Foundation, Inc.\\ Copyright (C)
2001-2019 Nikos Mavrogiannopoulos

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".
INFO-DIR-SECTION Software libraries
START-INFO-DIR-ENTRY
* GnuTLS: (gnutls).		GNU Transport Layer Security Library.
END-INFO-DIR-ENTRY

INFO-DIR-SECTION System Administration
START-INFO-DIR-ENTRY
* certtool: (gnutls)certtool Invocation.	Manipulate certificates and keys.
* gnutls-serv: (gnutls)gnutls-serv Invocation.	GnuTLS test server.
* gnutls-cli: (gnutls)gnutls-cli Invocation.	GnuTLS test client.
* gnutls-cli-debug: (gnutls)gnutls-cli-debug Invocation.	GnuTLS debug client.
* psktool: (gnutls)psktool Invocation.	Simple TLS-Pre-Shared-Keys manager.
* srptool: (gnutls)srptool Invocation.	Simple SRP password tool.
END-INFO-DIR-ENTRY


File: gnutls.info,  Node: PKCS 7 API,  Next: OCSP API,  Prev: X509 certificate API,  Up: API reference

E.4 PKCS 7 API
==============

The following functions are to be used for PKCS 7 structures handling.
Their prototypes lie in 'gnutls/pkcs7.h'.

gnutls_pkcs7_add_attr
---------------------

 -- Function: int gnutls_pkcs7_add_attr (gnutls_pkcs7_attrs_t * LIST,
          const char * OID, gnutls_datum_t * DATA, unsigned FLAGS)
     LIST: A list of existing attributes or pointer to 'NULL' for the
     first one

     OID: the OID of the attribute to be set

     DATA: the raw (DER-encoded) data of the attribute to be set

     FLAGS: zero or 'GNUTLS_PKCS7_ATTR_ENCODE_OCTET_STRING'

     This function will set a PKCS '7' attribute in the provided list.
     If this function fails, the previous list would be deallocated.

     Note that any attributes set with this function must either be DER
     or BER encoded, unless a special flag is present.

     *Returns:* On success, the new list head, otherwise 'NULL' .

     *Since:* 3.4.2

gnutls_pkcs7_attrs_deinit
-------------------------

 -- Function: void gnutls_pkcs7_attrs_deinit (gnutls_pkcs7_attrs_t LIST)
     LIST: A list of existing attributes

     This function will clear a PKCS '7' attribute list.

     *Since:* 3.4.2

gnutls_pkcs7_deinit
-------------------

 -- Function: void gnutls_pkcs7_deinit (gnutls_pkcs7_t PKCS7)
     PKCS7: the type to be deinitialized

     This function will deinitialize a PKCS7 type.

gnutls_pkcs7_delete_crl
-----------------------

 -- Function: int gnutls_pkcs7_delete_crl (gnutls_pkcs7_t PKCS7, int
          INDX)
     PKCS7: The pkcs7 type

     INDX: the index of the crl to delete

     This function will delete a crl from a PKCS7 or RFC2630 crl set.
     Index starts from 0.  Returns 0 on success.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs7_delete_crt
-----------------------

 -- Function: int gnutls_pkcs7_delete_crt (gnutls_pkcs7_t PKCS7, int
          INDX)
     PKCS7: The pkcs7 type

     INDX: the index of the certificate to delete

     This function will delete a certificate from a PKCS7 or RFC2630
     certificate set.  Index starts from 0.  Returns 0 on success.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs7_export
-------------------

 -- Function: int gnutls_pkcs7_export (gnutls_pkcs7_t PKCS7,
          gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     PKCS7: The pkcs7 type

     FORMAT: the format of output params.  One of PEM or DER.

     OUTPUT_DATA: will contain a structure PEM or DER encoded

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will export the pkcs7 structure to DER or PEM format.

     If the buffer provided is not long enough to hold the output, then
     * 'output_data_size' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
     will be returned.

     If the structure is PEM encoded, it will have a header of "BEGIN
     PKCS7".

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs7_export2
--------------------

 -- Function: int gnutls_pkcs7_export2 (gnutls_pkcs7_t PKCS7,
          gnutls_x509_crt_fmt_t FORMAT, gnutls_datum_t * OUT)
     PKCS7: The pkcs7 type

     FORMAT: the format of output params.  One of PEM or DER.

     OUT: will contain a structure PEM or DER encoded

     This function will export the pkcs7 structure to DER or PEM format.

     The output buffer is allocated using 'gnutls_malloc()' .

     If the structure is PEM encoded, it will have a header of "BEGIN
     PKCS7".

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.3

gnutls_pkcs7_get_attr
---------------------

 -- Function: int gnutls_pkcs7_get_attr (gnutls_pkcs7_attrs_t LIST,
          unsigned IDX, char ** OID, gnutls_datum_t * DATA, unsigned
          FLAGS)
     LIST: A list of existing attributes or 'NULL' for the first one

     IDX: the index of the attribute to get

     OID: the OID of the attribute (read-only)

     DATA: the raw data of the attribute

     FLAGS: zero or 'GNUTLS_PKCS7_ATTR_ENCODE_OCTET_STRING'

     This function will get a PKCS '7' attribute from the provided list.
     The OID is a constant string, but data will be allocated and must
     be deinitialized by the caller.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned if there are no
     data in the current index.

     *Since:* 3.4.2

gnutls_pkcs7_get_crl_count
--------------------------

 -- Function: int gnutls_pkcs7_get_crl_count (gnutls_pkcs7_t PKCS7)
     PKCS7: The pkcs7 type

     This function will return the number of certificates in the PKCS7
     or RFC2630 crl set.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs7_get_crl_raw
------------------------

 -- Function: int gnutls_pkcs7_get_crl_raw (gnutls_pkcs7_t PKCS7,
          unsigned INDX, void * CRL, size_t * CRL_SIZE)
     PKCS7: The pkcs7 type

     INDX: contains the index of the crl to extract

     CRL: the contents of the crl will be copied there (may be null)

     CRL_SIZE: should hold the size of the crl

     This function will return a crl of the PKCS7 or RFC2630 crl set.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.  If the provided buffer is not
     long enough, then 'crl_size' is updated and
     'GNUTLS_E_SHORT_MEMORY_BUFFER' is returned.  After the last crl has
     been read 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

gnutls_pkcs7_get_crl_raw2
-------------------------

 -- Function: int gnutls_pkcs7_get_crl_raw2 (gnutls_pkcs7_t PKCS7,
          unsigned INDX, gnutls_datum_t * CRL)
     PKCS7: The pkcs7 type

     INDX: contains the index of the crl to extract

     CRL: will contain the contents of the CRL in an allocated buffer

     This function will return a DER encoded CRL of the PKCS7 or RFC2630
     crl set.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.  After the last crl has been read
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

     *Since:* 3.4.2

gnutls_pkcs7_get_crt_count
--------------------------

 -- Function: int gnutls_pkcs7_get_crt_count (gnutls_pkcs7_t PKCS7)
     PKCS7: should contain a 'gnutls_pkcs7_t' type

     This function will return the number of certificates in the PKCS7
     or RFC2630 certificate set.

     *Returns:* On success, a positive number is returned, otherwise a
     negative error value.

gnutls_pkcs7_get_crt_raw
------------------------

 -- Function: int gnutls_pkcs7_get_crt_raw (gnutls_pkcs7_t PKCS7,
          unsigned INDX, void * CERTIFICATE, size_t * CERTIFICATE_SIZE)
     PKCS7: should contain a gnutls_pkcs7_t type

     INDX: contains the index of the certificate to extract

     CERTIFICATE: the contents of the certificate will be copied there
     (may be null)

     CERTIFICATE_SIZE: should hold the size of the certificate

     This function will return a certificate of the PKCS7 or RFC2630
     certificate set.

     After the last certificate has been read
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.  If the provided buffer is not
     long enough, then 'certificate_size' is updated and
     'GNUTLS_E_SHORT_MEMORY_BUFFER' is returned.

gnutls_pkcs7_get_crt_raw2
-------------------------

 -- Function: int gnutls_pkcs7_get_crt_raw2 (gnutls_pkcs7_t PKCS7,
          unsigned INDX, gnutls_datum_t * CERT)
     PKCS7: should contain a gnutls_pkcs7_t type

     INDX: contains the index of the certificate to extract

     CERT: will hold the contents of the certificate; must be
     deallocated with 'gnutls_free()'

     This function will return a certificate of the PKCS7 or RFC2630
     certificate set.

     After the last certificate has been read
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.  If the provided buffer is not
     long enough, then 'certificate_size' is updated and
     'GNUTLS_E_SHORT_MEMORY_BUFFER' is returned.

     *Since:* 3.4.2

gnutls_pkcs7_get_embedded_data
------------------------------

 -- Function: int gnutls_pkcs7_get_embedded_data (gnutls_pkcs7_t PKCS7,
          unsigned FLAGS, gnutls_datum_t * DATA)
     PKCS7: should contain a gnutls_pkcs7_t type

     FLAGS: must be zero or 'GNUTLS_PKCS7_EDATA_GET_RAW'

     DATA: will hold the embedded data in the provided structure

     This function will return the data embedded in the signature of the
     PKCS7 structure.  If no data are available then
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

     The returned data must be de-allocated using 'gnutls_free()' .

     Note, that this function returns the exact same data that are
     authenticated.  If the 'GNUTLS_PKCS7_EDATA_GET_RAW' flag is
     provided, the returned data will be including the wrapping
     tag/value as they are encoded in the structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.4.8

gnutls_pkcs7_get_embedded_data_oid
----------------------------------

 -- Function: const char * gnutls_pkcs7_get_embedded_data_oid
          (gnutls_pkcs7_t PKCS7)
     PKCS7: should contain a gnutls_pkcs7_t type

     This function will return the OID of the data embedded in the
     signature of the PKCS7 structure.  If no data are available then
     'NULL' will be returned.  The returned value will be valid during
     the lifetime of the 'pkcs7' structure.

     *Returns:* On success, a pointer to an OID string, 'NULL' on error.

     *Since:* 3.5.5

gnutls_pkcs7_get_signature_count
--------------------------------

 -- Function: int gnutls_pkcs7_get_signature_count (gnutls_pkcs7_t
          PKCS7)
     PKCS7: should contain a 'gnutls_pkcs7_t' type

     This function will return the number of signatures in the PKCS7
     structure.

     *Returns:* On success, a positive number is returned, otherwise a
     negative error value.

     *Since:* 3.4.3

gnutls_pkcs7_get_signature_info
-------------------------------

 -- Function: int gnutls_pkcs7_get_signature_info (gnutls_pkcs7_t PKCS7,
          unsigned IDX, gnutls_pkcs7_signature_info_st * INFO)
     PKCS7: should contain a 'gnutls_pkcs7_t' type

     IDX: the index of the signature info to check

     INFO: will contain the output signature

     This function will return information about the signature
     identified by idx in the provided PKCS '7' structure.  The
     information should be deinitialized using
     'gnutls_pkcs7_signature_info_deinit()' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.4.2

gnutls_pkcs7_import
-------------------

 -- Function: int gnutls_pkcs7_import (gnutls_pkcs7_t PKCS7, const
          gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT)
     PKCS7: The data to store the parsed PKCS7.

     DATA: The DER or PEM encoded PKCS7.

     FORMAT: One of DER or PEM

     This function will convert the given DER or PEM encoded PKCS7 to
     the native 'gnutls_pkcs7_t' format.  The output will be stored in
     'pkcs7' .

     If the PKCS7 is PEM encoded it should have a header of "PKCS7".

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs7_init
-----------------

 -- Function: int gnutls_pkcs7_init (gnutls_pkcs7_t * PKCS7)
     PKCS7: A pointer to the type to be initialized

     This function will initialize a PKCS7 structure.  PKCS7 structures
     usually contain lists of X.509 Certificates and X.509 Certificate
     revocation lists.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs7_print
------------------

 -- Function: int gnutls_pkcs7_print (gnutls_pkcs7_t PKCS7,
          gnutls_certificate_print_formats_t FORMAT, gnutls_datum_t *
          OUT)
     PKCS7: The PKCS7 struct to be printed

     FORMAT: Indicate the format to use

     OUT: Newly allocated datum with null terminated string.

     This function will pretty print a signed PKCS '7' structure,
     suitable for display to a human.

     Currently the supported formats are 'GNUTLS_CRT_PRINT_FULL' and
     'GNUTLS_CRT_PRINT_COMPACT' .

     The output 'out' needs to be deallocated using 'gnutls_free()' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs7_set_crl
--------------------

 -- Function: int gnutls_pkcs7_set_crl (gnutls_pkcs7_t PKCS7,
          gnutls_x509_crl_t CRL)
     PKCS7: The pkcs7 type

     CRL: the DER encoded crl to be added

     This function will add a parsed CRL to the PKCS7 or RFC2630 crl
     set.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs7_set_crl_raw
------------------------

 -- Function: int gnutls_pkcs7_set_crl_raw (gnutls_pkcs7_t PKCS7, const
          gnutls_datum_t * CRL)
     PKCS7: The pkcs7 type

     CRL: the DER encoded crl to be added

     This function will add a crl to the PKCS7 or RFC2630 crl set.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs7_set_crt
--------------------

 -- Function: int gnutls_pkcs7_set_crt (gnutls_pkcs7_t PKCS7,
          gnutls_x509_crt_t CRT)
     PKCS7: The pkcs7 type

     CRT: the certificate to be copied.

     This function will add a parsed certificate to the PKCS7 or RFC2630
     certificate set.  This is a wrapper function over
     'gnutls_pkcs7_set_crt_raw()' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs7_set_crt_raw
------------------------

 -- Function: int gnutls_pkcs7_set_crt_raw (gnutls_pkcs7_t PKCS7, const
          gnutls_datum_t * CRT)
     PKCS7: The pkcs7 type

     CRT: the DER encoded certificate to be added

     This function will add a certificate to the PKCS7 or RFC2630
     certificate set.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs7_sign
-----------------

 -- Function: int gnutls_pkcs7_sign (gnutls_pkcs7_t PKCS7,
          gnutls_x509_crt_t SIGNER, gnutls_privkey_t SIGNER_KEY, const
          gnutls_datum_t * DATA, gnutls_pkcs7_attrs_t SIGNED_ATTRS,
          gnutls_pkcs7_attrs_t UNSIGNED_ATTRS, gnutls_digest_algorithm_t
          DIG, unsigned FLAGS)
     PKCS7: should contain a 'gnutls_pkcs7_t' type

     SIGNER: the certificate to sign the structure

     SIGNER_KEY: the key to sign the structure

     DATA: The data to be signed or 'NULL' if the data are already
     embedded

     SIGNED_ATTRS: Any additional attributes to be included in the
     signed ones (or 'NULL' )

     UNSIGNED_ATTRS: Any additional attributes to be included in the
     unsigned ones (or 'NULL' )

     DIG: The digest algorithm to use for signing

     FLAGS: Should be zero or one of 'GNUTLS_PKCS7' flags

     This function will add a signature in the provided PKCS '7'
     structure for the provided data.  Multiple signatures can be made
     with different signers.

     The available flags are: 'GNUTLS_PKCS7_EMBED_DATA' ,
     'GNUTLS_PKCS7_INCLUDE_TIME' , 'GNUTLS_PKCS7_INCLUDE_CERT' , and
     'GNUTLS_PKCS7_WRITE_SPKI' .  They are explained in the
     'gnutls_pkcs7_sign_flags' definition.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.4.2

gnutls_pkcs7_signature_info_deinit
----------------------------------

 -- Function: void gnutls_pkcs7_signature_info_deinit
          (gnutls_pkcs7_signature_info_st * INFO)
     INFO: should point to a 'gnutls_pkcs7_signature_info_st' structure

     This function will deinitialize any allocated value in the provided
     'gnutls_pkcs7_signature_info_st' .

     *Since:* 3.4.2

gnutls_pkcs7_verify
-------------------

 -- Function: int gnutls_pkcs7_verify (gnutls_pkcs7_t PKCS7,
          gnutls_x509_trust_list_t TL, gnutls_typed_vdata_st * VDATA,
          unsigned int VDATA_SIZE, unsigned IDX, const gnutls_datum_t *
          DATA, unsigned FLAGS)
     PKCS7: should contain a 'gnutls_pkcs7_t' type

     TL: A list of trusted certificates

     VDATA: an array of typed data

     VDATA_SIZE: the number of data elements

     IDX: the index of the signature info to check

     DATA: The data to be verified or 'NULL'

     FLAGS: Zero or an OR list of 'gnutls_certificate_verify_flags'

     This function will verify the provided data against the signature
     present in the SignedData of the PKCS '7' structure.  If the data
     provided are NULL then the data in the encapsulatedContent field
     will be used instead.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.  A verification error results to
     a 'GNUTLS_E_PK_SIG_VERIFY_FAILED' and the lack of encapsulated data
     to verify to a 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' .

     *Since:* 3.4.2

gnutls_pkcs7_verify_direct
--------------------------

 -- Function: int gnutls_pkcs7_verify_direct (gnutls_pkcs7_t PKCS7,
          gnutls_x509_crt_t SIGNER, unsigned IDX, const gnutls_datum_t *
          DATA, unsigned FLAGS)
     PKCS7: should contain a 'gnutls_pkcs7_t' type

     SIGNER: the certificate believed to have signed the structure

     IDX: the index of the signature info to check

     DATA: The data to be verified or 'NULL'

     FLAGS: Zero or an OR list of 'gnutls_certificate_verify_flags'

     This function will verify the provided data against the signature
     present in the SignedData of the PKCS '7' structure.  If the data
     provided are NULL then the data in the encapsulatedContent field
     will be used instead.

     Note that, unlike 'gnutls_pkcs7_verify()' this function does not
     verify the key purpose of the signer.  It is expected for the
     caller to verify the intended purpose of the 'signer' -e.g., via
     'gnutls_x509_crt_get_key_purpose_oid()' , or
     'gnutls_x509_crt_check_key_purpose()' .

     Note also, that since GnuTLS 3.5.6 this function introduces checks
     in the end certificate ( 'signer' ), including time checks and key
     usage checks.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.  A verification error results to
     a 'GNUTLS_E_PK_SIG_VERIFY_FAILED' and the lack of encapsulated data
     to verify to a 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' .

     *Since:* 3.4.2


File: gnutls.info,  Node: OCSP API,  Next: PKCS 12 API,  Prev: PKCS 7 API,  Up: API reference

E.5 OCSP API
============

The following functions are for OCSP certificate status checking.  Their
prototypes lie in 'gnutls/ocsp.h'.

gnutls_ocsp_req_add_cert
------------------------

 -- Function: int gnutls_ocsp_req_add_cert (gnutls_ocsp_req_t REQ,
          gnutls_digest_algorithm_t DIGEST, gnutls_x509_crt_t ISSUER,
          gnutls_x509_crt_t CERT)
     REQ: should contain a 'gnutls_ocsp_req_t' type

     DIGEST: hash algorithm, a 'gnutls_digest_algorithm_t' value

     ISSUER: issuer of 'subject' certificate

     CERT: certificate to request status for

     This function will add another request to the OCSP request for a
     particular certificate.  The issuer name hash, issuer key hash, and
     serial number fields is populated as follows.  The issuer name and
     the serial number is taken from 'cert' .  The issuer key is taken
     from 'issuer' .  The hashed values will be hashed using the
     'digest' algorithm, normally 'GNUTLS_DIG_SHA1' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_ocsp_req_add_cert_id
---------------------------

 -- Function: int gnutls_ocsp_req_add_cert_id (gnutls_ocsp_req_t REQ,
          gnutls_digest_algorithm_t DIGEST, const gnutls_datum_t *
          ISSUER_NAME_HASH, const gnutls_datum_t * ISSUER_KEY_HASH,
          const gnutls_datum_t * SERIAL_NUMBER)
     REQ: should contain a 'gnutls_ocsp_req_t' type

     DIGEST: hash algorithm, a 'gnutls_digest_algorithm_t' value

     ISSUER_NAME_HASH: hash of issuer's DN

     ISSUER_KEY_HASH: hash of issuer's public key

     SERIAL_NUMBER: serial number of certificate to check

     This function will add another request to the OCSP request for a
     particular certificate having the issuer name hash of
     'issuer_name_hash' and issuer key hash of 'issuer_key_hash' (both
     hashed using 'digest' ) and serial number 'serial_number' .

     The information needed corresponds to the CertID structure:

     <informalexample><programlisting> CertID	::= SEQUENCE {
     hashAlgorithm AlgorithmIdentifier, issuerNameHash OCTET STRING, -
     Hash of Issuer's DN issuerKeyHash OCTET STRING, - Hash of Issuers
     public key serialNumber	CertificateSerialNumber }
     </programlisting></informalexample>

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_ocsp_req_deinit
----------------------

 -- Function: void gnutls_ocsp_req_deinit (gnutls_ocsp_req_t REQ)
     REQ: The data to be deinitialized

     This function will deinitialize a OCSP request structure.

gnutls_ocsp_req_export
----------------------

 -- Function: int gnutls_ocsp_req_export (gnutls_ocsp_req_t REQ,
          gnutls_datum_t * DATA)
     REQ: Holds the OCSP request

     DATA: newly allocate buffer holding DER encoded OCSP request

     This function will export the OCSP request to DER format.

     *Returns:* In case of failure a negative error code will be
     returned, and 0 on success.

gnutls_ocsp_req_get_cert_id
---------------------------

 -- Function: int gnutls_ocsp_req_get_cert_id (gnutls_ocsp_req_t REQ,
          unsigned INDX, gnutls_digest_algorithm_t * DIGEST,
          gnutls_datum_t * ISSUER_NAME_HASH, gnutls_datum_t *
          ISSUER_KEY_HASH, gnutls_datum_t * SERIAL_NUMBER)
     REQ: should contain a 'gnutls_ocsp_req_t' type

     INDX: Specifies which extension OID to get.  Use (0) to get the
     first one.

     DIGEST: output variable with 'gnutls_digest_algorithm_t' hash
     algorithm

     ISSUER_NAME_HASH: output buffer with hash of issuer's DN

     ISSUER_KEY_HASH: output buffer with hash of issuer's public key

     SERIAL_NUMBER: output buffer with serial number of certificate to
     check

     This function will return the certificate information of the 'indx'
     'ed request in the OCSP request.  The information returned
     corresponds to the CertID structure:

     <informalexample><programlisting> CertID	::= SEQUENCE {
     hashAlgorithm AlgorithmIdentifier, issuerNameHash OCTET STRING, -
     Hash of Issuer's DN issuerKeyHash OCTET STRING, - Hash of Issuers
     public key serialNumber	CertificateSerialNumber }
     </programlisting></informalexample>

     Each of the pointers to output variables may be NULL to indicate
     that the caller is not interested in that value.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.  If you have reached
     the last CertID available 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'
     will be returned.

gnutls_ocsp_req_get_extension
-----------------------------

 -- Function: int gnutls_ocsp_req_get_extension (gnutls_ocsp_req_t REQ,
          unsigned INDX, gnutls_datum_t * OID, unsigned int * CRITICAL,
          gnutls_datum_t * DATA)
     REQ: should contain a 'gnutls_ocsp_req_t' type

     INDX: Specifies which extension OID to get.  Use (0) to get the
     first one.

     OID: will hold newly allocated buffer with OID of extension, may be
     NULL

     CRITICAL: output variable with critical flag, may be NULL.

     DATA: will hold newly allocated buffer with extension data, may be
     NULL

     This function will return all information about the requested
     extension in the OCSP request.  The information returned is the
     OID, the critical flag, and the data itself.  The extension OID
     will be stored as a string.  Any of 'oid' , 'critical' , and 'data'
     may be NULL which means that the caller is not interested in
     getting that information back.

     The caller needs to deallocate memory by calling 'gnutls_free()' on
     'oid' ->data and 'data' ->data.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.  If you have reached
     the last extension available
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

gnutls_ocsp_req_get_nonce
-------------------------

 -- Function: int gnutls_ocsp_req_get_nonce (gnutls_ocsp_req_t REQ,
          unsigned int * CRITICAL, gnutls_datum_t * NONCE)
     REQ: should contain a 'gnutls_ocsp_req_t' type

     CRITICAL: whether nonce extension is marked critical, or NULL

     NONCE: will hold newly allocated buffer with nonce data

     This function will return the OCSP request nonce extension data.

     The caller needs to deallocate memory by calling 'gnutls_free()' on
     'nonce' ->data.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_ocsp_req_get_version
---------------------------

 -- Function: int gnutls_ocsp_req_get_version (gnutls_ocsp_req_t REQ)
     REQ: should contain a 'gnutls_ocsp_req_t' type

     This function will return the version of the OCSP request.
     Typically this is always 1 indicating version 1.

     *Returns:* version of OCSP request, or a negative error code on
     error.

gnutls_ocsp_req_import
----------------------

 -- Function: int gnutls_ocsp_req_import (gnutls_ocsp_req_t REQ, const
          gnutls_datum_t * DATA)
     REQ: The data to store the parsed request.

     DATA: DER encoded OCSP request.

     This function will convert the given DER encoded OCSP request to
     the native 'gnutls_ocsp_req_t' format.  The output will be stored
     in 'req' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_req_init
--------------------

 -- Function: int gnutls_ocsp_req_init (gnutls_ocsp_req_t * REQ)
     REQ: A pointer to the type to be initialized

     This function will initialize an OCSP request structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_req_print
---------------------

 -- Function: int gnutls_ocsp_req_print (gnutls_ocsp_req_t REQ,
          gnutls_ocsp_print_formats_t FORMAT, gnutls_datum_t * OUT)
     REQ: The data to be printed

     FORMAT: Indicate the format to use

     OUT: Newly allocated datum with (0) terminated string.

     This function will pretty print a OCSP request, suitable for
     display to a human.

     If the format is 'GNUTLS_OCSP_PRINT_FULL' then all fields of the
     request will be output, on multiple lines.

     The output 'out' ->data needs to be deallocate using
     'gnutls_free()' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_req_randomize_nonce
-------------------------------

 -- Function: int gnutls_ocsp_req_randomize_nonce (gnutls_ocsp_req_t
          REQ)
     REQ: should contain a 'gnutls_ocsp_req_t' type

     This function will add or update an nonce extension to the OCSP
     request with a newly generated random value.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_ocsp_req_set_extension
-----------------------------

 -- Function: int gnutls_ocsp_req_set_extension (gnutls_ocsp_req_t REQ,
          const char * OID, unsigned int CRITICAL, const gnutls_datum_t
          * DATA)
     REQ: should contain a 'gnutls_ocsp_req_t' type

     OID: buffer with OID of extension as a string.

     CRITICAL: critical flag, normally false.

     DATA: the extension data

     This function will add an extension to the OCSP request.  Calling
     this function multiple times for the same OID will overwrite values
     from earlier calls.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_ocsp_req_set_nonce
-------------------------

 -- Function: int gnutls_ocsp_req_set_nonce (gnutls_ocsp_req_t REQ,
          unsigned int CRITICAL, const gnutls_datum_t * NONCE)
     REQ: should contain a 'gnutls_ocsp_req_t' type

     CRITICAL: critical flag, normally false.

     NONCE: the nonce data

     This function will add an nonce extension to the OCSP request.
     Calling this function multiple times will overwrite values from
     earlier calls.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_ocsp_resp_check_crt
--------------------------

 -- Function: int gnutls_ocsp_resp_check_crt (gnutls_ocsp_resp_t RESP,
          unsigned int INDX, gnutls_x509_crt_t CRT)
     RESP: should contain a 'gnutls_ocsp_resp_t' type

     INDX: Specifies response number to get.  Use (0) to get the first
     one.

     CRT: The certificate to check

     This function will check whether the OCSP response is about the
     provided certificate.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

     *Since:* 3.1.3

gnutls_ocsp_resp_deinit
-----------------------

 -- Function: void gnutls_ocsp_resp_deinit (gnutls_ocsp_resp_t RESP)
     RESP: The data to be deinitialized

     This function will deinitialize a OCSP response structure.

gnutls_ocsp_resp_export
-----------------------

 -- Function: int gnutls_ocsp_resp_export (gnutls_ocsp_resp_t RESP,
          gnutls_datum_t * DATA)
     RESP: Holds the OCSP response

     DATA: newly allocate buffer holding DER encoded OCSP response

     This function will export the OCSP response to DER format.

     *Returns:* In case of failure a negative error code will be
     returned, and 0 on success.

gnutls_ocsp_resp_export2
------------------------

 -- Function: int gnutls_ocsp_resp_export2 (gnutls_ocsp_resp_t RESP,
          gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FMT)
     RESP: Holds the OCSP response

     DATA: newly allocate buffer holding DER or PEM encoded OCSP
     response

     FMT: DER or PEM

     This function will export the OCSP response to DER or PEM format.

     *Returns:* In case of failure a negative error code will be
     returned, and 0 on success.

     *Since:* 3.6.3

gnutls_ocsp_resp_get_certs
--------------------------

 -- Function: int gnutls_ocsp_resp_get_certs (gnutls_ocsp_resp_t RESP,
          gnutls_x509_crt_t ** CERTS, size_t * NCERTS)
     RESP: should contain a 'gnutls_ocsp_resp_t' type

     CERTS: newly allocated array with 'gnutls_x509_crt_t' certificates

     NCERTS: output variable with number of allocated certs.

     This function will extract the X.509 certificates found in the
     Basic OCSP Response.  The 'certs' output variable will hold a newly
     allocated zero-terminated array with X.509 certificates.

     Every certificate in the array needs to be de-allocated with
     'gnutls_x509_crt_deinit()' and the array itself must be freed using
     'gnutls_free()' .

     Both the 'certs' and 'ncerts' variables may be NULL. Then the
     function will work as normal but will not return the NULL:d
     information.  This can be used to get the number of certificates
     only, or to just get the certificate array without its size.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_resp_get_extension
------------------------------

 -- Function: int gnutls_ocsp_resp_get_extension (gnutls_ocsp_resp_t
          RESP, unsigned INDX, gnutls_datum_t * OID, unsigned int *
          CRITICAL, gnutls_datum_t * DATA)
     RESP: should contain a 'gnutls_ocsp_resp_t' type

     INDX: Specifies which extension OID to get.  Use (0) to get the
     first one.

     OID: will hold newly allocated buffer with OID of extension, may be
     NULL

     CRITICAL: output variable with critical flag, may be NULL.

     DATA: will hold newly allocated buffer with extension data, may be
     NULL

     This function will return all information about the requested
     extension in the OCSP response.  The information returned is the
     OID, the critical flag, and the data itself.  The extension OID
     will be stored as a string.  Any of 'oid' , 'critical' , and 'data'
     may be NULL which means that the caller is not interested in
     getting that information back.

     The caller needs to deallocate memory by calling 'gnutls_free()' on
     'oid' ->data and 'data' ->data.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.  If you have reached
     the last extension available
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

gnutls_ocsp_resp_get_nonce
--------------------------

 -- Function: int gnutls_ocsp_resp_get_nonce (gnutls_ocsp_resp_t RESP,
          unsigned int * CRITICAL, gnutls_datum_t * NONCE)
     RESP: should contain a 'gnutls_ocsp_resp_t' type

     CRITICAL: whether nonce extension is marked critical

     NONCE: will hold newly allocated buffer with nonce data

     This function will return the Basic OCSP Response nonce extension
     data.

     The caller needs to deallocate memory by calling 'gnutls_free()' on
     'nonce' ->data.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_ocsp_resp_get_produced
-----------------------------

 -- Function: time_t gnutls_ocsp_resp_get_produced (gnutls_ocsp_resp_t
          RESP)
     RESP: should contain a 'gnutls_ocsp_resp_t' type

     This function will return the time when the OCSP response was
     signed.

     *Returns:* signing time, or (time_t)-1 on error.

gnutls_ocsp_resp_get_responder
------------------------------

 -- Function: int gnutls_ocsp_resp_get_responder (gnutls_ocsp_resp_t
          RESP, gnutls_datum_t * DN)
     RESP: should contain a 'gnutls_ocsp_resp_t' type

     DN: newly allocated buffer with name

     This function will extract the name of the Basic OCSP Response in
     the provided buffer.  The name will be in the form
     "C=xxxx,O=yyyy,CN=zzzz" as described in RFC2253.  The output string
     will be ASCII or UTF-8 encoded, depending on the certificate data.

     If the responder ID is not a name but a hash, this function will
     return zero and the 'dn' elements will be set to 'NULL' .

     The caller needs to deallocate memory by calling 'gnutls_free()' on
     'dn' ->data.

     This function does not output a fully RFC4514 compliant string, if
     that is required see 'gnutls_ocsp_resp_get_responder2()' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.  When no data exist it
     will return success and set 'dn' elements to zero.

gnutls_ocsp_resp_get_responder2
-------------------------------

 -- Function: int gnutls_ocsp_resp_get_responder2 (gnutls_ocsp_resp_t
          RESP, gnutls_datum_t * DN, unsigned FLAGS)
     RESP: should contain a 'gnutls_ocsp_resp_t' type

     DN: newly allocated buffer with name

     FLAGS: zero or 'GNUTLS_X509_DN_FLAG_COMPAT'

     This function will extract the name of the Basic OCSP Response in
     the provided buffer.  The name will be in the form
     "C=xxxx,O=yyyy,CN=zzzz" as described in RFC2253.  The output string
     will be ASCII or UTF-8 encoded, depending on the certificate data.

     If the responder ID is not a name but a hash, this function will
     return zero and the 'dn' elements will be set to 'NULL' .

     The caller needs to deallocate memory by calling 'gnutls_free()' on
     'dn' ->data.

     When the flag 'GNUTLS_X509_DN_FLAG_COMPAT' is specified, the output
     format will match the format output by previous to 3.5.6 versions
     of GnuTLS which was not not fully RFC4514-compliant.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.  When no data exist it
     will return 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' .

gnutls_ocsp_resp_get_responder_raw_id
-------------------------------------

 -- Function: int gnutls_ocsp_resp_get_responder_raw_id
          (gnutls_ocsp_resp_t RESP, unsigned TYPE, gnutls_datum_t * RAW)
     RESP: should contain a 'gnutls_ocsp_resp_t' type

     TYPE: should be 'GNUTLS_OCSP_RESP_ID_KEY' or
     'GNUTLS_OCSP_RESP_ID_DN'

     RAW: newly allocated buffer with the raw ID

     This function will extract the raw key (or DN) ID of the Basic OCSP
     Response in the provided buffer.  If the responder ID is not a key
     ID then this function will return
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' .

     The caller needs to deallocate memory by calling 'gnutls_free()' on
     'dn' ->data.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_ocsp_resp_get_response
-----------------------------

 -- Function: int gnutls_ocsp_resp_get_response (gnutls_ocsp_resp_t
          RESP, gnutls_datum_t * RESPONSE_TYPE_OID, gnutls_datum_t *
          RESPONSE)
     RESP: should contain a 'gnutls_ocsp_resp_t' type

     RESPONSE_TYPE_OID: newly allocated output buffer with response type
     OID

     RESPONSE: newly allocated output buffer with DER encoded response

     This function will extract the response type OID in and the
     response data from an OCSP response.  Normally the
     'response_type_oid' is always "1.3.6.1.5.5.7.48.1.1" which means
     the 'response' should be decoded as a Basic OCSP Response, but
     technically other response types could be used.

     This function is typically only useful when you want to extract the
     response type OID of an response for diagnostic purposes.
     Otherwise 'gnutls_ocsp_resp_import()' will decode the basic OCSP
     response part and the caller need not worry about that aspect.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_resp_get_signature
------------------------------

 -- Function: int gnutls_ocsp_resp_get_signature (gnutls_ocsp_resp_t
          RESP, gnutls_datum_t * SIG)
     RESP: should contain a 'gnutls_ocsp_resp_t' type

     SIG: newly allocated output buffer with signature data

     This function will extract the signature field of a OCSP response.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_resp_get_signature_algorithm
----------------------------------------

 -- Function: int gnutls_ocsp_resp_get_signature_algorithm
          (gnutls_ocsp_resp_t RESP)
     RESP: should contain a 'gnutls_ocsp_resp_t' type

     This function will return a value of the 'gnutls_sign_algorithm_t'
     enumeration that is the signature algorithm that has been used to
     sign the OCSP response.

     *Returns:* a 'gnutls_sign_algorithm_t' value, or a negative error
     code on error.

gnutls_ocsp_resp_get_single
---------------------------

 -- Function: int gnutls_ocsp_resp_get_single (gnutls_ocsp_resp_t RESP,
          unsigned INDX, gnutls_digest_algorithm_t * DIGEST,
          gnutls_datum_t * ISSUER_NAME_HASH, gnutls_datum_t *
          ISSUER_KEY_HASH, gnutls_datum_t * SERIAL_NUMBER, unsigned int
          * CERT_STATUS, time_t * THIS_UPDATE, time_t * NEXT_UPDATE,
          time_t * REVOCATION_TIME, unsigned int * REVOCATION_REASON)
     RESP: should contain a 'gnutls_ocsp_resp_t' type

     INDX: Specifies response number to get.  Use (0) to get the first
     one.

     DIGEST: output variable with 'gnutls_digest_algorithm_t' hash
     algorithm

     ISSUER_NAME_HASH: output buffer with hash of issuer's DN

     ISSUER_KEY_HASH: output buffer with hash of issuer's public key

     SERIAL_NUMBER: output buffer with serial number of certificate to
     check

     CERT_STATUS: a certificate status, a 'gnutls_ocsp_cert_status_t'
     enum.

     THIS_UPDATE: time at which the status is known to be correct.

     NEXT_UPDATE: when newer information will be available, or
     (time_t)-1 if unspecified

     REVOCATION_TIME: when 'cert_status' is 'GNUTLS_OCSP_CERT_REVOKED' ,
     holds time of revocation.

     REVOCATION_REASON: revocation reason, a 'gnutls_x509_crl_reason_t'
     enum.

     This function will return the certificate information of the 'indx'
     'ed response in the Basic OCSP Response 'resp' .  The information
     returned corresponds to the OCSP SingleResponse structure except
     the final singleExtensions.

     Each of the pointers to output variables may be NULL to indicate
     that the caller is not interested in that value.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.  If you have reached
     the last CertID available 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'
     will be returned.

gnutls_ocsp_resp_get_status
---------------------------

 -- Function: int gnutls_ocsp_resp_get_status (gnutls_ocsp_resp_t RESP)
     RESP: should contain a 'gnutls_ocsp_resp_t' type

     This function will return the status of a OCSP response, an
     'gnutls_ocsp_resp_status_t' enumeration.

     *Returns:* status of OCSP request as a 'gnutls_ocsp_resp_status_t'
     , or a negative error code on error.

gnutls_ocsp_resp_get_version
----------------------------

 -- Function: int gnutls_ocsp_resp_get_version (gnutls_ocsp_resp_t RESP)
     RESP: should contain a 'gnutls_ocsp_resp_t' type

     This function will return the version of the Basic OCSP Response.
     Typically this is always 1 indicating version 1.

     *Returns:* version of Basic OCSP response, or a negative error code
     on error.

gnutls_ocsp_resp_import
-----------------------

 -- Function: int gnutls_ocsp_resp_import (gnutls_ocsp_resp_t RESP,
          const gnutls_datum_t * DATA)
     RESP: The data to store the parsed response.

     DATA: DER encoded OCSP response.

     This function will convert the given DER encoded OCSP response to
     the native 'gnutls_ocsp_resp_t' format.  It also decodes the Basic
     OCSP Response part, if any.  The output will be stored in 'resp' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_resp_import2
------------------------

 -- Function: int gnutls_ocsp_resp_import2 (gnutls_ocsp_resp_t RESP,
          const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FMT)
     RESP: The data to store the parsed response.

     DATA: DER or PEM encoded OCSP response.

     FMT: DER or PEM

     This function will convert the given OCSP response to the native
     'gnutls_ocsp_resp_t' format.  It also decodes the Basic OCSP
     Response part, if any.  The output will be stored in 'resp' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.6.3

gnutls_ocsp_resp_init
---------------------

 -- Function: int gnutls_ocsp_resp_init (gnutls_ocsp_resp_t * RESP)
     RESP: A pointer to the type to be initialized

     This function will initialize an OCSP response structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_resp_list_import2
-----------------------------

 -- Function: int gnutls_ocsp_resp_list_import2 (gnutls_ocsp_resp_t **
          OCSPS, unsigned int * SIZE, const gnutls_datum_t * RESP_DATA,
          gnutls_x509_crt_fmt_t FORMAT, unsigned int FLAGS)
     OCSPS: Will hold the parsed OCSP response list.

     SIZE: It will contain the size of the list.

     RESP_DATA: The PEM encoded OCSP list.

     FORMAT: One of 'GNUTLS_X509_FMT_PEM' or 'GNUTLS_X509_FMT_DER'

     FLAGS: must be (0) or an OR'd sequence of
     gnutls_certificate_import_flags.

     This function will convert the given PEM encoded OCSP response list
     to the native gnutls_ocsp_resp_t format.  The output will be stored
     in 'ocsps' which will be allocated and initialized.

     The OCSP responses should have a header of "OCSP RESPONSE".

     To deinitialize responses, you need to deinitialize each
     'gnutls_ocsp_resp_t' structure independently, and use
     'gnutls_free()' at 'ocsps' .

     In PEM files, when no OCSP responses are detected
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

     *Returns:* the number of responses read or a negative error value.

     *Since:* 3.6.3

gnutls_ocsp_resp_print
----------------------

 -- Function: int gnutls_ocsp_resp_print (gnutls_ocsp_resp_t RESP,
          gnutls_ocsp_print_formats_t FORMAT, gnutls_datum_t * OUT)
     RESP: The data to be printed

     FORMAT: Indicate the format to use

     OUT: Newly allocated datum with (0) terminated string.

     This function will pretty print a OCSP response, suitable for
     display to a human.

     If the format is 'GNUTLS_OCSP_PRINT_FULL' then all fields of the
     response will be output, on multiple lines.

     The output 'out' ->data needs to be deallocate using
     'gnutls_free()' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_resp_verify
-----------------------

 -- Function: int gnutls_ocsp_resp_verify (gnutls_ocsp_resp_t RESP,
          gnutls_x509_trust_list_t TRUSTLIST, unsigned int * VERIFY,
          unsigned int FLAGS)
     RESP: should contain a 'gnutls_ocsp_resp_t' type

     TRUSTLIST: trust anchors as a 'gnutls_x509_trust_list_t' type

     VERIFY: output variable with verification status, an
     'gnutls_ocsp_verify_reason_t'

     FLAGS: verification flags from 'gnutls_certificate_verify_flags'

     Verify signature of the Basic OCSP Response against the public key
     in the certificate of a trusted signer.  The 'trustlist' should be
     populated with trust anchors.  The function will extract the signer
     certificate from the Basic OCSP Response and will verify it against
     the 'trustlist' .  A trusted signer is a certificate that is either
     in 'trustlist' , or it is signed directly by a certificate in
     'trustlist' and has the id-ad-ocspSigning Extended Key Usage bit
     set.

     The output 'verify' variable will hold verification status codes
     (e.g., 'GNUTLS_OCSP_VERIFY_SIGNER_NOT_FOUND' ,
     'GNUTLS_OCSP_VERIFY_INSECURE_ALGORITHM' ) which are only valid if
     the function returned 'GNUTLS_E_SUCCESS' .

     Note that the function returns 'GNUTLS_E_SUCCESS' even when
     verification failed.  The caller must always inspect the 'verify'
     variable to find out the verification status.

     The 'flags' variable should be 0 for now.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_resp_verify_direct
------------------------------

 -- Function: int gnutls_ocsp_resp_verify_direct (gnutls_ocsp_resp_t
          RESP, gnutls_x509_crt_t ISSUER, unsigned int * VERIFY,
          unsigned int FLAGS)
     RESP: should contain a 'gnutls_ocsp_resp_t' type

     ISSUER: certificate believed to have signed the response

     VERIFY: output variable with verification status, an
     'gnutls_ocsp_verify_reason_t'

     FLAGS: verification flags from 'gnutls_certificate_verify_flags'

     Verify signature of the Basic OCSP Response against the public key
     in the 'issuer' certificate.

     The output 'verify' variable will hold verification status codes
     (e.g., 'GNUTLS_OCSP_VERIFY_SIGNER_NOT_FOUND' ,
     'GNUTLS_OCSP_VERIFY_INSECURE_ALGORITHM' ) which are only valid if
     the function returned 'GNUTLS_E_SUCCESS' .

     Note that the function returns 'GNUTLS_E_SUCCESS' even when
     verification failed.  The caller must always inspect the 'verify'
     variable to find out the verification status.

     The 'flags' variable should be 0 for now.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.


File: gnutls.info,  Node: PKCS 12 API,  Next: PKCS 11 API,  Prev: OCSP API,  Up: API reference

E.6 PKCS 12 API
===============

The following functions are to be used for PKCS 12 handling.  Their
prototypes lie in 'gnutls/pkcs12.h'.

gnutls_pkcs12_bag_decrypt
-------------------------

 -- Function: int gnutls_pkcs12_bag_decrypt (gnutls_pkcs12_bag_t BAG,
          const char * PASS)
     BAG: The bag

     PASS: The password used for encryption, must be ASCII.

     This function will decrypt the given encrypted bag and return 0 on
     success.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_pkcs12_bag_deinit
------------------------

 -- Function: void gnutls_pkcs12_bag_deinit (gnutls_pkcs12_bag_t BAG)
     BAG: A pointer to the type to be initialized

     This function will deinitialize a PKCS12 Bag structure.

gnutls_pkcs12_bag_enc_info
--------------------------

 -- Function: int gnutls_pkcs12_bag_enc_info (gnutls_pkcs12_bag_t BAG,
          unsigned int * SCHEMA, unsigned int * CIPHER, void * SALT,
          unsigned int * SALT_SIZE, unsigned int * ITER_COUNT, char **
          OID)
     BAG: The bag

     SCHEMA: indicate the schema as one of 'gnutls_pkcs_encrypt_flags_t'

     CIPHER: the cipher used as 'gnutls_cipher_algorithm_t'

     SALT: PBKDF2 salt (if non-NULL then 'salt_size' initially holds its
     size)

     SALT_SIZE: PBKDF2 salt size

     ITER_COUNT: PBKDF2 iteration count

     OID: if non-NULL it will contain an allocated null-terminated
     variable with the OID

     This function will provide information on the encryption algorithms
     used in an encrypted bag.  If the structure algorithms are unknown
     the code 'GNUTLS_E_UNKNOWN_CIPHER_TYPE' will be returned, and only
     'oid' , will be set.  That is, 'oid' will be set on encrypted bags
     whether supported or not.  It must be deinitialized using
     'gnutls_free()' .  The other variables are only set on supported
     structures.

     *Returns:* 'GNUTLS_E_INVALID_REQUEST' if the provided bag isn't
     encrypted, 'GNUTLS_E_UNKNOWN_CIPHER_TYPE' if the structure's
     encryption isn't supported, or another negative error code in case
     of a failure.  Zero on success.

gnutls_pkcs12_bag_encrypt
-------------------------

 -- Function: int gnutls_pkcs12_bag_encrypt (gnutls_pkcs12_bag_t BAG,
          const char * PASS, unsigned int FLAGS)
     BAG: The bag

     PASS: The password used for encryption, must be ASCII

     FLAGS: should be one of 'gnutls_pkcs_encrypt_flags_t' elements
     bitwise or'd

     This function will encrypt the given bag.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_pkcs12_bag_get_count
---------------------------

 -- Function: int gnutls_pkcs12_bag_get_count (gnutls_pkcs12_bag_t BAG)
     BAG: The bag

     This function will return the number of the elements within the
     bag.

     *Returns:* Number of elements in bag, or an negative error code on
     error.

gnutls_pkcs12_bag_get_data
--------------------------

 -- Function: int gnutls_pkcs12_bag_get_data (gnutls_pkcs12_bag_t BAG,
          unsigned INDX, gnutls_datum_t * DATA)
     BAG: The bag

     INDX: The element of the bag to get the data from

     DATA: where the bag's data will be.  Should be treated as constant.

     This function will return the bag's data.  The data is a constant
     that is stored into the bag.  Should not be accessed after the bag
     is deleted.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_bag_get_friendly_name
-----------------------------------

 -- Function: int gnutls_pkcs12_bag_get_friendly_name
          (gnutls_pkcs12_bag_t BAG, unsigned INDX, char ** NAME)
     BAG: The bag

     INDX: The bag's element to add the id

     NAME: will hold a pointer to the name (to be treated as const)

     This function will return the friendly name, of the specified bag
     element.  The key ID is usually used to distinguish the local
     private key and the certificate pair.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.  or a negative error code on
     error.

gnutls_pkcs12_bag_get_key_id
----------------------------

 -- Function: int gnutls_pkcs12_bag_get_key_id (gnutls_pkcs12_bag_t BAG,
          unsigned INDX, gnutls_datum_t * ID)
     BAG: The bag

     INDX: The bag's element to add the id

     ID: where the ID will be copied (to be treated as const)

     This function will return the key ID, of the specified bag element.
     The key ID is usually used to distinguish the local private key and
     the certificate pair.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.  or a negative error code on
     error.

gnutls_pkcs12_bag_get_type
--------------------------

 -- Function: int gnutls_pkcs12_bag_get_type (gnutls_pkcs12_bag_t BAG,
          unsigned INDX)
     BAG: The bag

     INDX: The element of the bag to get the type

     This function will return the bag's type.

     *Returns:* On error a negative error value or one of the
     'gnutls_pkcs12_bag_type_t' enumerations.

gnutls_pkcs12_bag_init
----------------------

 -- Function: int gnutls_pkcs12_bag_init (gnutls_pkcs12_bag_t * BAG)
     BAG: A pointer to the type to be initialized

     This function will initialize a PKCS12 bag structure.  PKCS12 Bags
     usually contain private keys, lists of X.509 Certificates and X.509
     Certificate revocation lists.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_bag_set_crl
-------------------------

 -- Function: int gnutls_pkcs12_bag_set_crl (gnutls_pkcs12_bag_t BAG,
          gnutls_x509_crl_t CRL)
     BAG: The bag

     CRL: the CRL to be copied.

     This function will insert the given CRL into the bag.  This is just
     a wrapper over 'gnutls_pkcs12_bag_set_data()' .

     *Returns:* the index of the added bag on success, or a negative
     error code on failure.

gnutls_pkcs12_bag_set_crt
-------------------------

 -- Function: int gnutls_pkcs12_bag_set_crt (gnutls_pkcs12_bag_t BAG,
          gnutls_x509_crt_t CRT)
     BAG: The bag

     CRT: the certificate to be copied.

     This function will insert the given certificate into the bag.  This
     is just a wrapper over 'gnutls_pkcs12_bag_set_data()' .

     *Returns:* the index of the added bag on success, or a negative
     value on failure.

gnutls_pkcs12_bag_set_data
--------------------------

 -- Function: int gnutls_pkcs12_bag_set_data (gnutls_pkcs12_bag_t BAG,
          gnutls_pkcs12_bag_type_t TYPE, const gnutls_datum_t * DATA)
     BAG: The bag

     TYPE: The data's type

     DATA: the data to be copied.

     This function will insert the given data of the given type into the
     bag.

     *Returns:* the index of the added bag on success, or a negative
     value on error.

gnutls_pkcs12_bag_set_friendly_name
-----------------------------------

 -- Function: int gnutls_pkcs12_bag_set_friendly_name
          (gnutls_pkcs12_bag_t BAG, unsigned INDX, const char * NAME)
     BAG: The bag

     INDX: The bag's element to add the id

     NAME: the name

     This function will add the given key friendly name, to the
     specified, by the index, bag element.  The name will be encoded as
     a 'Friendly name' bag attribute, which is usually used to set a
     user name to the local private key and the certificate pair.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.  or a negative error code on
     error.

gnutls_pkcs12_bag_set_key_id
----------------------------

 -- Function: int gnutls_pkcs12_bag_set_key_id (gnutls_pkcs12_bag_t BAG,
          unsigned INDX, const gnutls_datum_t * ID)
     BAG: The bag

     INDX: The bag's element to add the id

     ID: the ID

     This function will add the given key ID, to the specified, by the
     index, bag element.  The key ID will be encoded as a 'Local key
     identifier' bag attribute, which is usually used to distinguish the
     local private key and the certificate pair.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.  or a negative error code on
     error.

gnutls_pkcs12_bag_set_privkey
-----------------------------

 -- Function: int gnutls_pkcs12_bag_set_privkey (gnutls_pkcs12_bag_t
          BAG, gnutls_x509_privkey_t PRIVKEY, const char * PASSWORD,
          unsigned FLAGS)
     BAG: The bag

     PRIVKEY: the private key to be copied.

     PASSWORD: the password to protect the key with (may be 'NULL' )

     FLAGS: should be one of 'gnutls_pkcs_encrypt_flags_t' elements
     bitwise or'd

     This function will insert the given private key into the bag.  This
     is just a wrapper over 'gnutls_pkcs12_bag_set_data()' .

     *Returns:* the index of the added bag on success, or a negative
     value on failure.

gnutls_pkcs12_deinit
--------------------

 -- Function: void gnutls_pkcs12_deinit (gnutls_pkcs12_t PKCS12)
     PKCS12: The type to be initialized

     This function will deinitialize a PKCS12 type.

gnutls_pkcs12_export
--------------------

 -- Function: int gnutls_pkcs12_export (gnutls_pkcs12_t PKCS12,
          gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     PKCS12: A pkcs12 type

     FORMAT: the format of output params.  One of PEM or DER.

     OUTPUT_DATA: will contain a structure PEM or DER encoded

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will export the pkcs12 structure to DER or PEM
     format.

     If the buffer provided is not long enough to hold the output, then
     *output_data_size will be updated and GNUTLS_E_SHORT_MEMORY_BUFFER
     will be returned.

     If the structure is PEM encoded, it will have a header of "BEGIN
     PKCS12".

     *Returns:* In case of failure a negative error code will be
     returned, and 0 on success.

gnutls_pkcs12_export2
---------------------

 -- Function: int gnutls_pkcs12_export2 (gnutls_pkcs12_t PKCS12,
          gnutls_x509_crt_fmt_t FORMAT, gnutls_datum_t * OUT)
     PKCS12: A pkcs12 type

     FORMAT: the format of output params.  One of PEM or DER.

     OUT: will contain a structure PEM or DER encoded

     This function will export the pkcs12 structure to DER or PEM
     format.

     The output buffer is allocated using 'gnutls_malloc()' .

     If the structure is PEM encoded, it will have a header of "BEGIN
     PKCS12".

     *Returns:* In case of failure a negative error code will be
     returned, and 0 on success.

     *Since:* 3.1.3

gnutls_pkcs12_generate_mac
--------------------------

 -- Function: int gnutls_pkcs12_generate_mac (gnutls_pkcs12_t PKCS12,
          const char * PASS)
     PKCS12: A pkcs12 type

     PASS: The password for the MAC

     This function will generate a MAC for the PKCS12 structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_generate_mac2
---------------------------

 -- Function: int gnutls_pkcs12_generate_mac2 (gnutls_pkcs12_t PKCS12,
          gnutls_mac_algorithm_t MAC, const char * PASS)
     PKCS12: A pkcs12 type

     MAC: the MAC algorithm to use

     PASS: The password for the MAC

     This function will generate a MAC for the PKCS12 structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_get_bag
---------------------

 -- Function: int gnutls_pkcs12_get_bag (gnutls_pkcs12_t PKCS12, int
          INDX, gnutls_pkcs12_bag_t BAG)
     PKCS12: A pkcs12 type

     INDX: contains the index of the bag to extract

     BAG: An initialized bag, where the contents of the bag will be
     copied

     This function will return a Bag from the PKCS12 structure.

     After the last Bag has been read
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_import
--------------------

 -- Function: int gnutls_pkcs12_import (gnutls_pkcs12_t PKCS12, const
          gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT, unsigned
          int FLAGS)
     PKCS12: The data to store the parsed PKCS12.

     DATA: The DER or PEM encoded PKCS12.

     FORMAT: One of DER or PEM

     FLAGS: an ORed sequence of gnutls_privkey_pkcs8_flags

     This function will convert the given DER or PEM encoded PKCS12 to
     the native gnutls_pkcs12_t format.  The output will be stored in
     'pkcs12'.

     If the PKCS12 is PEM encoded it should have a header of "PKCS12".

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_init
------------------

 -- Function: int gnutls_pkcs12_init (gnutls_pkcs12_t * PKCS12)
     PKCS12: A pointer to the type to be initialized

     This function will initialize a PKCS12 type.  PKCS12 structures
     usually contain lists of X.509 Certificates and X.509 Certificate
     revocation lists.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_mac_info
----------------------

 -- Function: int gnutls_pkcs12_mac_info (gnutls_pkcs12_t PKCS12,
          unsigned int * MAC, void * SALT, unsigned int * SALT_SIZE,
          unsigned int * ITER_COUNT, char ** OID)
     PKCS12: A pkcs12 type

     MAC: the MAC algorithm used as 'gnutls_mac_algorithm_t'

     SALT: the salt used for string to key (if non-NULL then 'salt_size'
     initially holds its size)

     SALT_SIZE: string to key salt size

     ITER_COUNT: string to key iteration count

     OID: if non-NULL it will contain an allocated null-terminated
     variable with the OID

     This function will provide information on the MAC algorithm used in
     a PKCS '12' structure.  If the structure algorithms are unknown the
     code 'GNUTLS_E_UNKNOWN_HASH_ALGORITHM' will be returned, and only
     'oid' , will be set.  That is, 'oid' will be set on structures with
     a MAC whether supported or not.  It must be deinitialized using
     'gnutls_free()' .  The other variables are only set on supported
     structures.

     *Returns:* 'GNUTLS_E_INVALID_REQUEST' if the provided structure
     doesn't contain a MAC, 'GNUTLS_E_UNKNOWN_HASH_ALGORITHM' if the
     structure's MAC isn't supported, or another negative error code in
     case of a failure.  Zero on success.

gnutls_pkcs12_set_bag
---------------------

 -- Function: int gnutls_pkcs12_set_bag (gnutls_pkcs12_t PKCS12,
          gnutls_pkcs12_bag_t BAG)
     PKCS12: should contain a gnutls_pkcs12_t type

     BAG: An initialized bag

     This function will insert a Bag into the PKCS12 structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_simple_parse
--------------------------

 -- Function: int gnutls_pkcs12_simple_parse (gnutls_pkcs12_t P12, const
          char * PASSWORD, gnutls_x509_privkey_t * KEY,
          gnutls_x509_crt_t ** CHAIN, unsigned int * CHAIN_LEN,
          gnutls_x509_crt_t ** EXTRA_CERTS, unsigned int *
          EXTRA_CERTS_LEN, gnutls_x509_crl_t * CRL, unsigned int FLAGS)
     P12: A pkcs12 type

     PASSWORD: optional password used to decrypt the structure, bags and
     keys.

     KEY: a structure to store the parsed private key.

     CHAIN: the corresponding to key certificate chain (may be 'NULL' )

     CHAIN_LEN: will be updated with the number of additional (may be
     'NULL' )

     EXTRA_CERTS: optional pointer to receive an array of additional
     certificates found in the PKCS12 structure (may be 'NULL' ).

     EXTRA_CERTS_LEN: will be updated with the number of additional
     certs (may be 'NULL' ).

     CRL: an optional structure to store the parsed CRL (may be 'NULL'
     ).

     FLAGS: should be zero or one of GNUTLS_PKCS12_SP_*

     This function parses a PKCS12 structure in 'pkcs12' and extracts
     the private key, the corresponding certificate chain, any
     additional certificates and a CRL. The structures in 'key' ,
     'chain' 'crl' , and 'extra_certs' must not be initialized.

     The 'extra_certs' and 'extra_certs_len' parameters are optional and
     both may be set to 'NULL' .  If either is non-'NULL' , then both
     must be set.  The value for 'extra_certs' is allocated using
     'gnutls_malloc()' .

     Encrypted PKCS12 bags and PKCS8 private keys are supported, but
     only with password based security and the same password for all
     operations.

     Note that a PKCS12 structure may contain many keys and/or
     certificates, and there is no way to identify which key/certificate
     pair you want.  For this reason this function is useful for PKCS12
     files that contain only one key/certificate pair and/or one CRL.

     If the provided structure has encrypted fields but no password is
     provided then this function returns 'GNUTLS_E_DECRYPTION_FAILED' .

     Note that normally the chain constructed does not include self
     signed certificates, to comply with TLS' requirements.  If,
     however, the flag 'GNUTLS_PKCS12_SP_INCLUDE_SELF_SIGNED' is
     specified then self signed certificates will be included in the
     chain.

     Prior to using this function the PKCS '12' structure integrity must
     be verified using 'gnutls_pkcs12_verify_mac()' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.0

gnutls_pkcs12_verify_mac
------------------------

 -- Function: int gnutls_pkcs12_verify_mac (gnutls_pkcs12_t PKCS12,
          const char * PASS)
     PKCS12: should contain a gnutls_pkcs12_t type

     PASS: The password for the MAC

     This function will verify the MAC for the PKCS12 structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.


File: gnutls.info,  Node: PKCS 11 API,  Next: TPM API,  Prev: PKCS 12 API,  Up: API reference

E.7 Hardware token via PKCS 11 API
==================================

The following functions are to be used for PKCS 11 handling.  Their
prototypes lie in 'gnutls/pkcs11.h'.

gnutls_pkcs11_add_provider
--------------------------

 -- Function: int gnutls_pkcs11_add_provider (const char * NAME, const
          char * PARAMS)
     NAME: The filename of the module

     PARAMS: should be NULL or a known string (see description)

     This function will load and add a PKCS 11 module to the module list
     used in gnutls.  After this function is called the module will be
     used for PKCS 11 operations.

     When loading a module to be used for certificate verification, use
     the string 'trusted' as 'params' .

     Note that this function is not thread safe.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_copy_attached_extension
-------------------------------------

 -- Function: int gnutls_pkcs11_copy_attached_extension (const char *
          TOKEN_URL, gnutls_x509_crt_t CRT, gnutls_datum_t * DATA, const
          char * LABEL, unsigned int FLAGS)
     TOKEN_URL: A PKCS '11' URL specifying a token

     CRT: An X.509 certificate object

     DATA: the attached extension

     LABEL: A name to be used for the attached extension (may be 'NULL'
     )

     FLAGS: One of GNUTLS_PKCS11_OBJ_FLAG_*

     This function will copy an the attached extension in 'data' for the
     certificate provided in 'crt' in the PKCS '11' token specified by
     the URL (typically a trust module).  The extension must be in
     RFC5280 Extension format.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.3.8

gnutls_pkcs11_copy_pubkey
-------------------------

 -- Function: int gnutls_pkcs11_copy_pubkey (const char * TOKEN_URL,
          gnutls_pubkey_t PUBKEY, const char * LABEL, const
          gnutls_datum_t * CID, unsigned int KEY_USAGE, unsigned int
          FLAGS)
     TOKEN_URL: A PKCS '11' URL specifying a token

     PUBKEY: The public key to copy

     LABEL: The name to be used for the stored data

     CID: The CKA_ID to set for the object -if NULL, the ID will be
     derived from the public key

     KEY_USAGE: One of GNUTLS_KEY_*

     FLAGS: One of GNUTLS_PKCS11_OBJ_FLAG_*

     This function will copy a public key object into a PKCS '11' token
     specified by a URL. Valid flags to mark the key:
     'GNUTLS_PKCS11_OBJ_FLAG_MARK_TRUSTED' ,
     'GNUTLS_PKCS11_OBJ_FLAG_MARK_PRIVATE' ,
     'GNUTLS_PKCS11_OBJ_FLAG_MARK_CA' ,
     'GNUTLS_PKCS11_OBJ_FLAG_MARK_ALWAYS_AUTH' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.4.6

gnutls_pkcs11_copy_secret_key
-----------------------------

 -- Function: int gnutls_pkcs11_copy_secret_key (const char * TOKEN_URL,
          gnutls_datum_t * KEY, const char * LABEL, unsigned int
          KEY_USAGE, unsigned int FLAGS)
     TOKEN_URL: A PKCS '11' URL specifying a token

     KEY: The raw key

     LABEL: A name to be used for the stored data

     KEY_USAGE: One of GNUTLS_KEY_*

     FLAGS: One of GNUTLS_PKCS11_OBJ_FLAG_*

     This function will copy a raw secret (symmetric) key into a PKCS
     '11' token specified by a URL. The key can be marked as sensitive
     or not.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_copy_x509_crt
---------------------------

 -- Function: int gnutls_pkcs11_copy_x509_crt (const char * TOKEN_URL,
          gnutls_x509_crt_t CRT, const char * LABEL, unsigned int FLAGS)
     TOKEN_URL: A PKCS '11' URL specifying a token

     CRT: A certificate

     LABEL: A name to be used for the stored data

     FLAGS: One of GNUTLS_PKCS11_OBJ_FLAG_*

     This function will copy a certificate into a PKCS '11' token
     specified by a URL. The certificate can be marked as trusted or
     not.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_copy_x509_crt2
----------------------------

 -- Function: int gnutls_pkcs11_copy_x509_crt2 (const char * TOKEN_URL,
          gnutls_x509_crt_t CRT, const char * LABEL, const
          gnutls_datum_t * CID, unsigned int FLAGS)
     TOKEN_URL: A PKCS '11' URL specifying a token

     CRT: The certificate to copy

     LABEL: The name to be used for the stored data

     CID: The CKA_ID to set for the object -if NULL, the ID will be
     derived from the public key

     FLAGS: One of GNUTLS_PKCS11_OBJ_FLAG_*

     This function will copy a certificate into a PKCS '11' token
     specified by a URL. Valid flags to mark the certificate:
     'GNUTLS_PKCS11_OBJ_FLAG_MARK_TRUSTED' ,
     'GNUTLS_PKCS11_OBJ_FLAG_MARK_PRIVATE' ,
     'GNUTLS_PKCS11_OBJ_FLAG_MARK_CA' ,
     'GNUTLS_PKCS11_OBJ_FLAG_MARK_ALWAYS_AUTH' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.4.0

gnutls_pkcs11_copy_x509_privkey
-------------------------------

 -- Function: int gnutls_pkcs11_copy_x509_privkey (const char *
          TOKEN_URL, gnutls_x509_privkey_t KEY, const char * LABEL,
          unsigned int KEY_USAGE, unsigned int FLAGS)
     TOKEN_URL: A PKCS '11' URL specifying a token

     KEY: A private key

     LABEL: A name to be used for the stored data

     KEY_USAGE: One of GNUTLS_KEY_*

     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags

     This function will copy a private key into a PKCS '11' token
     specified by a URL.

     Since 3.6.3 the objects are marked as sensitive by default unless
     'GNUTLS_PKCS11_OBJ_FLAG_MARK_NOT_SENSITIVE' is specified.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_copy_x509_privkey2
--------------------------------

 -- Function: int gnutls_pkcs11_copy_x509_privkey2 (const char *
          TOKEN_URL, gnutls_x509_privkey_t KEY, const char * LABEL,
          const gnutls_datum_t * CID, unsigned int KEY_USAGE, unsigned
          int FLAGS)
     TOKEN_URL: A PKCS '11' URL specifying a token

     KEY: A private key

     LABEL: A name to be used for the stored data

     CID: The CKA_ID to set for the object -if NULL, the ID will be
     derived from the public key

     KEY_USAGE: One of GNUTLS_KEY_*

     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags

     This function will copy a private key into a PKCS '11' token
     specified by a URL.

     Since 3.6.3 the objects are marked as sensitive by default unless
     'GNUTLS_PKCS11_OBJ_FLAG_MARK_NOT_SENSITIVE' is specified.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.4.0

gnutls_pkcs11_crt_is_known
--------------------------

 -- Function: unsigned gnutls_pkcs11_crt_is_known (const char * URL,
          gnutls_x509_crt_t CERT, unsigned int FLAGS)
     URL: A PKCS 11 url identifying a token

     CERT: is the certificate to find issuer for

     FLAGS: Use zero or flags from 'GNUTLS_PKCS11_OBJ_FLAG' .

     This function will check whether the provided certificate is stored
     in the specified token.  This is useful in combination with
     'GNUTLS_PKCS11_OBJ_FLAG_RETRIEVE_TRUSTED' or
     'GNUTLS_PKCS11_OBJ_FLAG_RETRIEVE_DISTRUSTED' , to check whether a
     CA is present or a certificate is blacklisted in a trust PKCS '11'
     module.

     This function can be used with a 'url' of "pkcs11:", and in that
     case all modules will be searched.  To restrict the modules to the
     marked as trusted in p11-kit use the
     'GNUTLS_PKCS11_OBJ_FLAG_PRESENT_IN_TRUSTED_MODULE' flag.

     Note that the flag 'GNUTLS_PKCS11_OBJ_FLAG_RETRIEVE_DISTRUSTED' is
     specific to p11-kit trust modules.

     *Returns:* If the certificate exists non-zero is returned,
     otherwise zero.

     *Since:* 3.3.0

gnutls_pkcs11_deinit
--------------------

 -- Function: void gnutls_pkcs11_deinit ( VOID)

     This function will deinitialize the PKCS 11 subsystem in gnutls.
     This function is only needed if you need to deinitialize the
     subsystem without calling 'gnutls_global_deinit()' .

     *Since:* 2.12.0

gnutls_pkcs11_delete_url
------------------------

 -- Function: int gnutls_pkcs11_delete_url (const char * OBJECT_URL,
          unsigned int FLAGS)
     OBJECT_URL: The URL of the object to delete.

     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags

     This function will delete objects matching the given URL. Note that
     not all tokens support the delete operation.

     *Returns:* On success, the number of objects deleted is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_get_pin_function
------------------------------

 -- Function: gnutls_pin_callback_t gnutls_pkcs11_get_pin_function (void
          ** USERDATA)
     USERDATA: data to be supplied to callback

     This function will return the callback function set using
     'gnutls_pkcs11_set_pin_function()' .

     *Returns:* The function set or NULL otherwise.

     *Since:* 3.1.0

gnutls_pkcs11_get_raw_issuer
----------------------------

 -- Function: int gnutls_pkcs11_get_raw_issuer (const char * URL,
          gnutls_x509_crt_t CERT, gnutls_datum_t * ISSUER,
          gnutls_x509_crt_fmt_t FMT, unsigned int FLAGS)
     URL: A PKCS 11 url identifying a token

     CERT: is the certificate to find issuer for

     ISSUER: Will hold the issuer if any in an allocated buffer.

     FMT: The format of the exported issuer.

     FLAGS: Use zero or flags from 'GNUTLS_PKCS11_OBJ_FLAG' .

     This function will return the issuer of a given certificate, if it
     is stored in the token.  By default only marked as trusted issuers
     are returned.  If any issuer should be returned specify
     'GNUTLS_PKCS11_OBJ_FLAG_RETRIEVE_ANY' in 'flags' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.2.7

gnutls_pkcs11_get_raw_issuer_by_dn
----------------------------------

 -- Function: int gnutls_pkcs11_get_raw_issuer_by_dn (const char * URL,
          const gnutls_datum_t * DN, gnutls_datum_t * ISSUER,
          gnutls_x509_crt_fmt_t FMT, unsigned int FLAGS)
     URL: A PKCS 11 url identifying a token

     DN: is the DN to search for

     ISSUER: Will hold the issuer if any in an allocated buffer.

     FMT: The format of the exported issuer.

     FLAGS: Use zero or flags from 'GNUTLS_PKCS11_OBJ_FLAG' .

     This function will return the certificate with the given DN, if it
     is stored in the token.  By default only marked as trusted issuers
     are returned.  If any issuer should be returned specify
     'GNUTLS_PKCS11_OBJ_FLAG_RETRIEVE_ANY' in 'flags' .

     The name of the function includes issuer because it can be used to
     discover issuers of certificates.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.4.0

gnutls_pkcs11_get_raw_issuer_by_subject_key_id
----------------------------------------------

 -- Function: int gnutls_pkcs11_get_raw_issuer_by_subject_key_id (const
          char * URL, const gnutls_datum_t * DN, const gnutls_datum_t *
          SPKI, gnutls_datum_t * ISSUER, gnutls_x509_crt_fmt_t FMT,
          unsigned int FLAGS)
     URL: A PKCS 11 url identifying a token

     DN: is the DN to search for (may be 'NULL' )

     SPKI: is the subject key ID to search for

     ISSUER: Will hold the issuer if any in an allocated buffer.

     FMT: The format of the exported issuer.

     FLAGS: Use zero or flags from 'GNUTLS_PKCS11_OBJ_FLAG' .

     This function will return the certificate with the given DN and
     'spki' , if it is stored in the token.  By default only marked as
     trusted issuers are returned.  If any issuer should be returned
     specify 'GNUTLS_PKCS11_OBJ_FLAG_RETRIEVE_ANY' in 'flags' .

     The name of the function includes issuer because it can be used to
     discover issuers of certificates.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.4.2

gnutls_pkcs11_init
------------------

 -- Function: int gnutls_pkcs11_init (unsigned int FLAGS, const char *
          DEPRECATED_CONFIG_FILE)
     FLAGS: An ORed sequence of 'GNUTLS_PKCS11_FLAG_' *

     DEPRECATED_CONFIG_FILE: either NULL or the location of a deprecated
     configuration file

     This function will initialize the PKCS 11 subsystem in gnutls.  It
     will read configuration files if 'GNUTLS_PKCS11_FLAG_AUTO' is used
     or allow you to independently load PKCS 11 modules using
     'gnutls_pkcs11_add_provider()' if 'GNUTLS_PKCS11_FLAG_MANUAL' is
     specified.

     You don't need to call this function since GnuTLS 3.3.0 because it
     is being called during the first request PKCS 11 operation.  That
     call will assume the 'GNUTLS_PKCS11_FLAG_AUTO' flag.  If another
     flags are required then it must be called independently prior to
     any PKCS 11 operation.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_obj_deinit
------------------------

 -- Function: void gnutls_pkcs11_obj_deinit (gnutls_pkcs11_obj_t OBJ)
     OBJ: The type to be deinitialized

     This function will deinitialize a certificate structure.

     *Since:* 2.12.0

gnutls_pkcs11_obj_export
------------------------

 -- Function: int gnutls_pkcs11_obj_export (gnutls_pkcs11_obj_t OBJ,
          void * OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)
     OBJ: Holds the object

     OUTPUT_DATA: will contain the object data

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will export the PKCS11 object data.  It is normal for
     data to be inaccessible and in that case 'GNUTLS_E_INVALID_REQUEST'
     will be returned.

     If the buffer provided is not long enough to hold the output, then
     *output_data_size is updated and GNUTLS_E_SHORT_MEMORY_BUFFER will
     be returned.

     *Returns:* In case of failure a negative error code will be
     returned, and 'GNUTLS_E_SUCCESS' (0) on success.

     *Since:* 2.12.0

gnutls_pkcs11_obj_export2
-------------------------

 -- Function: int gnutls_pkcs11_obj_export2 (gnutls_pkcs11_obj_t OBJ,
          gnutls_datum_t * OUT)
     OBJ: Holds the object

     OUT: will contain the object data

     This function will export the PKCS11 object data.  It is normal for
     data to be inaccessible and in that case 'GNUTLS_E_INVALID_REQUEST'
     will be returned.

     The output buffer is allocated using 'gnutls_malloc()' .

     *Returns:* In case of failure a negative error code will be
     returned, and 'GNUTLS_E_SUCCESS' (0) on success.

     *Since:* 3.1.3

gnutls_pkcs11_obj_export3
-------------------------

 -- Function: int gnutls_pkcs11_obj_export3 (gnutls_pkcs11_obj_t OBJ,
          gnutls_x509_crt_fmt_t FMT, gnutls_datum_t * OUT)
     OBJ: Holds the object

     FMT: The format of the exported data

     OUT: will contain the object data

     This function will export the PKCS11 object data.  It is normal for
     data to be inaccessible and in that case 'GNUTLS_E_INVALID_REQUEST'
     will be returned.

     The output buffer is allocated using 'gnutls_malloc()' .

     *Returns:* In case of failure a negative error code will be
     returned, and 'GNUTLS_E_SUCCESS' (0) on success.

     *Since:* 3.2.7

gnutls_pkcs11_obj_export_url
----------------------------

 -- Function: int gnutls_pkcs11_obj_export_url (gnutls_pkcs11_obj_t OBJ,
          gnutls_pkcs11_url_type_t DETAILED, char ** URL)
     OBJ: Holds the PKCS 11 certificate

     DETAILED: non zero if a detailed URL is required

     URL: will contain an allocated url

     This function will export a URL identifying the given object.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_obj_flags_get_str
-------------------------------

 -- Function: char * gnutls_pkcs11_obj_flags_get_str (unsigned int
          FLAGS)
     FLAGS: holds the flags

     This function given an or-sequence of 'GNUTLS_PKCS11_OBJ_FLAG_MARK'
     , will return an allocated string with its description.  The string
     needs to be deallocated using 'gnutls_free()' .

     *Returns:* If flags is zero 'NULL' is returned, otherwise an
     allocated string.

     *Since:* 3.3.7

gnutls_pkcs11_obj_get_exts
--------------------------

 -- Function: int gnutls_pkcs11_obj_get_exts (gnutls_pkcs11_obj_t OBJ,
          gnutls_x509_ext_st ** EXTS, unsigned int * EXTS_SIZE, unsigned
          int FLAGS)
     OBJ: should contain a 'gnutls_pkcs11_obj_t' type

     EXTS: a pointer to a 'gnutls_x509_ext_st' pointer

     EXTS_SIZE: will be updated with the number of 'exts'

     FLAGS: Or sequence of 'GNUTLS_PKCS11_OBJ_' * flags

     This function will return information about attached extensions
     that associate to the provided object (which should be a
     certificate).  The extensions are the attached p11-kit trust module
     extensions.

     Each element of 'exts' must be deinitialized using
     'gnutls_x509_ext_deinit()' while 'exts' should be deallocated using
     'gnutls_free()' .

     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
     code on error.

     *Since:* 3.3.8

gnutls_pkcs11_obj_get_flags
---------------------------

 -- Function: int gnutls_pkcs11_obj_get_flags (gnutls_pkcs11_obj_t OBJ,
          unsigned int * OFLAGS)
     OBJ: The pkcs11 object

     OFLAGS: Will hold the output flags

     This function will return the flags of the object.  The 'oflags'
     will be flags from 'gnutls_pkcs11_obj_flags' .  That is, the
     'GNUTLS_PKCS11_OBJ_FLAG_MARK_' * flags.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.3.7

gnutls_pkcs11_obj_get_info
--------------------------

 -- Function: int gnutls_pkcs11_obj_get_info (gnutls_pkcs11_obj_t OBJ,
          gnutls_pkcs11_obj_info_t ITYPE, void * OUTPUT, size_t *
          OUTPUT_SIZE)
     OBJ: should contain a 'gnutls_pkcs11_obj_t' type

     ITYPE: Denotes the type of information requested

     OUTPUT: where output will be stored

     OUTPUT_SIZE: contains the maximum size of the output buffer and
     will be overwritten with the actual size.

     This function will return information about the PKCS11 certificate
     such as the label, id as well as token information where the key is
     stored.

     When output is text, a null terminated string is written to
     'output' and its string length is written to 'output_size' (without
     null terminator).  If the buffer is too small, 'output_size' will
     contain the expected buffer size (with null terminator for text)
     and return 'GNUTLS_E_SHORT_MEMORY_BUFFER' .

     In versions previously to 3.6.0 this function included the null
     terminator to 'output_size' .  After 3.6.0 the output size doesn't
     include the terminator character.

     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
     code on error.

     *Since:* 2.12.0

gnutls_pkcs11_obj_get_ptr
-------------------------

 -- Function: int gnutls_pkcs11_obj_get_ptr (gnutls_pkcs11_obj_t OBJ,
          void ** PTR, void ** SESSION, void ** OHANDLE, unsigned long *
          SLOT_ID, unsigned int FLAGS)
     OBJ: should contain a 'gnutls_pkcs11_obj_t' type

     PTR: will contain the CK_FUNCTION_LIST_PTR pointer (may be 'NULL' )

     SESSION: will contain the CK_SESSION_HANDLE of the object

     OHANDLE: will contain the CK_OBJECT_HANDLE of the object

     SLOT_ID: the identifier of the slot (may be 'NULL' )

     FLAGS: Or sequence of GNUTLS_PKCS11_OBJ_* flags

     Obtains the PKCS'11' session handles of an object.  'session' and
     'ohandle' must be deinitialized by the caller.  The returned
     pointers are independent of the 'obj' lifetime.

     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
     code on error.

     *Since:* 3.6.3

gnutls_pkcs11_obj_get_type
--------------------------

 -- Function: gnutls_pkcs11_obj_type_t gnutls_pkcs11_obj_get_type
          (gnutls_pkcs11_obj_t OBJ)
     OBJ: Holds the PKCS 11 object

     This function will return the type of the object being stored in
     the structure.

     *Returns:* The type of the object

     *Since:* 2.12.0

gnutls_pkcs11_obj_import_url
----------------------------

 -- Function: int gnutls_pkcs11_obj_import_url (gnutls_pkcs11_obj_t OBJ,
          const char * URL, unsigned int FLAGS)
     OBJ: The structure to store the object

     URL: a PKCS 11 url identifying the key

     FLAGS: Or sequence of GNUTLS_PKCS11_OBJ_* flags

     This function will "import" a PKCS 11 URL identifying an object
     (e.g.  certificate) to the 'gnutls_pkcs11_obj_t' type.  This does
     not involve any parsing (such as X.509 or OpenPGP) since the
     'gnutls_pkcs11_obj_t' is format agnostic.  Only data are
     transferred.

     If the flag 'GNUTLS_PKCS11_OBJ_FLAG_OVERWRITE_TRUSTMOD_EXT' is
     specified any certificate read, will have its extensions
     overwritten by any stapled extensions in the trust module.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_obj_init
----------------------

 -- Function: int gnutls_pkcs11_obj_init (gnutls_pkcs11_obj_t * OBJ)
     OBJ: A pointer to the type to be initialized

     This function will initialize a pkcs11 certificate structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_obj_list_import_url3
----------------------------------

 -- Function: int gnutls_pkcs11_obj_list_import_url3
          (gnutls_pkcs11_obj_t * P_LIST, unsigned int * N_LIST, const
          char * URL, unsigned int FLAGS)
     P_LIST: An uninitialized object list (may be 'NULL' )

     N_LIST: Initially should hold the maximum size of the list.  Will
     contain the actual size.

     URL: A PKCS 11 url identifying a set of objects

     FLAGS: Or sequence of GNUTLS_PKCS11_OBJ_* flags

     This function will initialize and set values to an object list by
     using all objects identified by a PKCS 11 URL.

     This function will enumerate all the objects specified by the
     PKCS'11' URL provided.  It expects an already allocated 'p_list'
     which has * 'n_list' elements, and that value will be updated to
     the actual number of present objects.  The 'p_list' objects will be
     initialized and set by this function.  To obtain a list of all
     available objects use a 'url' of 'pkcs11:'.

     All returned objects must be deinitialized using
     'gnutls_pkcs11_obj_deinit()' .

     The supported in this function 'flags' are
     'GNUTLS_PKCS11_OBJ_FLAG_LOGIN' , 'GNUTLS_PKCS11_OBJ_FLAG_LOGIN_SO'
     , 'GNUTLS_PKCS11_OBJ_FLAG_PRESENT_IN_TRUSTED_MODULE' ,
     'GNUTLS_PKCS11_OBJ_FLAG_CRT' , 'GNUTLS_PKCS11_OBJ_FLAG_PUBKEY' ,
     'GNUTLS_PKCS11_OBJ_FLAG_PRIVKEY' ,
     'GNUTLS_PKCS11_OBJ_FLAG_WITH_PRIVKEY' ,
     'GNUTLS_PKCS11_OBJ_FLAG_MARK_CA' ,
     'GNUTLS_PKCS11_OBJ_FLAG_MARK_TRUSTED' , and since 3.5.1 the
     'GNUTLS_PKCS11_OBJ_FLAG_OVERWRITE_TRUSTMOD_EXT' .

     On versions of GnuTLS prior to 3.4.0 the equivalent function was
     'gnutls_pkcs11_obj_list_import_url()' .  That is also available on
     this version as a macro which maps to this function.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.4.0

gnutls_pkcs11_obj_list_import_url4
----------------------------------

 -- Function: int gnutls_pkcs11_obj_list_import_url4
          (gnutls_pkcs11_obj_t ** P_LIST, unsigned int * N_LIST, const
          char * URL, unsigned int FLAGS)
     P_LIST: An uninitialized object list (may be NULL)

     N_LIST: It will contain the size of the list.

     URL: A PKCS 11 url identifying a set of objects

     FLAGS: Or sequence of GNUTLS_PKCS11_OBJ_* flags

     This function will enumerate all the objects specified by the
     PKCS'11' URL provided.  It will initialize and set values to the
     object pointer list ( 'p_list' ) provided.  To obtain a list of all
     available objects use a 'url' of 'pkcs11:'.

     All returned objects must be deinitialized using
     'gnutls_pkcs11_obj_deinit()' , and 'p_list' must be deinitialized
     using 'gnutls_free()' .

     The supported in this function 'flags' are
     'GNUTLS_PKCS11_OBJ_FLAG_LOGIN' , 'GNUTLS_PKCS11_OBJ_FLAG_LOGIN_SO'
     , 'GNUTLS_PKCS11_OBJ_FLAG_PRESENT_IN_TRUSTED_MODULE' ,
     'GNUTLS_PKCS11_OBJ_FLAG_CRT' , 'GNUTLS_PKCS11_OBJ_FLAG_PUBKEY' ,
     'GNUTLS_PKCS11_OBJ_FLAG_PRIVKEY' ,
     'GNUTLS_PKCS11_OBJ_FLAG_WITH_PRIVKEY' ,
     'GNUTLS_PKCS11_OBJ_FLAG_MARK_CA' ,
     'GNUTLS_PKCS11_OBJ_FLAG_MARK_TRUSTED' , and since 3.5.1 the
     'GNUTLS_PKCS11_OBJ_FLAG_OVERWRITE_TRUSTMOD_EXT' .

     On versions of GnuTLS prior to 3.4.0 the equivalent function was
     'gnutls_pkcs11_obj_list_import_url2()' .  That is also available on
     this version as a macro which maps to this function.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.4.0

gnutls_pkcs11_obj_set_info
--------------------------

 -- Function: int gnutls_pkcs11_obj_set_info (gnutls_pkcs11_obj_t OBJ,
          gnutls_pkcs11_obj_info_t ITYPE, const void * DATA, size_t
          DATA_SIZE, unsigned FLAGS)
     OBJ: should contain a 'gnutls_pkcs11_obj_t' type

     ITYPE: Denotes the type of information to be set

     DATA: the data to set

     DATA_SIZE: the size of data

     FLAGS: Or sequence of GNUTLS_PKCS11_OBJ_* flags

     This function will set attributes on the provided object.
     Available options for 'itype' are 'GNUTLS_PKCS11_OBJ_LABEL' ,
     'GNUTLS_PKCS11_OBJ_ID_HEX' , and 'GNUTLS_PKCS11_OBJ_ID' .

     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
     code on error.

     *Since:* 3.4.0

gnutls_pkcs11_obj_set_pin_function
----------------------------------

 -- Function: void gnutls_pkcs11_obj_set_pin_function
          (gnutls_pkcs11_obj_t OBJ, gnutls_pin_callback_t FN, void *
          USERDATA)
     OBJ: The object structure

     FN: the callback

     USERDATA: data associated with the callback

     This function will set a callback function to be used when required
     to access the object.  This function overrides the global set using
     'gnutls_pkcs11_set_pin_function()' .

     *Since:* 3.1.0

gnutls_pkcs11_privkey_cpy
-------------------------

 -- Function: int gnutls_pkcs11_privkey_cpy (gnutls_pkcs11_privkey_t
          DST, gnutls_pkcs11_privkey_t SRC)
     DST: The destination key, which should be initialized.

     SRC: The source key

     This function will copy a private key from source to destination
     key.  Destination has to be initialized.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.4.0

gnutls_pkcs11_privkey_deinit
----------------------------

 -- Function: void gnutls_pkcs11_privkey_deinit (gnutls_pkcs11_privkey_t
          KEY)
     KEY: the key to be deinitialized

     This function will deinitialize a private key structure.

gnutls_pkcs11_privkey_export_pubkey
-----------------------------------

 -- Function: int gnutls_pkcs11_privkey_export_pubkey
          (gnutls_pkcs11_privkey_t PKEY, gnutls_x509_crt_fmt_t FMT,
          gnutls_datum_t * DATA, unsigned int FLAGS)
     PKEY: The private key

     FMT: the format of output params.  PEM or DER.

     DATA: will hold the public key

     FLAGS: should be zero

     This function will extract the public key (modulus and public
     exponent) from the private key specified by the 'url' private key.
     This public key will be stored in 'pubkey' in the format specified
     by 'fmt' .  'pubkey' should be deinitialized using 'gnutls_free()'
     .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.3.7

gnutls_pkcs11_privkey_export_url
--------------------------------

 -- Function: int gnutls_pkcs11_privkey_export_url
          (gnutls_pkcs11_privkey_t KEY, gnutls_pkcs11_url_type_t
          DETAILED, char ** URL)
     KEY: Holds the PKCS 11 key

     DETAILED: non zero if a detailed URL is required

     URL: will contain an allocated url

     This function will export a URL identifying the given key.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs11_privkey_generate
------------------------------

 -- Function: int gnutls_pkcs11_privkey_generate (const char * URL,
          gnutls_pk_algorithm_t PK, unsigned int BITS, const char *
          LABEL, unsigned int FLAGS)
     URL: a token URL

     PK: the public key algorithm

     BITS: the security bits

     LABEL: a label

     FLAGS: should be zero

     This function will generate a private key in the specified by the
     'url' token.  The private key will be generate within the token and
     will not be exportable.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_pkcs11_privkey_generate2
-------------------------------

 -- Function: int gnutls_pkcs11_privkey_generate2 (const char * URL,
          gnutls_pk_algorithm_t PK, unsigned int BITS, const char *
          LABEL, gnutls_x509_crt_fmt_t FMT, gnutls_datum_t * PUBKEY,
          unsigned int FLAGS)
     URL: a token URL

     PK: the public key algorithm

     BITS: the security bits

     LABEL: a label

     FMT: the format of output params.  PEM or DER

     PUBKEY: will hold the public key (may be 'NULL' )

     FLAGS: zero or an OR'ed sequence of 'GNUTLS_PKCS11_OBJ_FLAGs'

     This function will generate a private key in the specified by the
     'url' token.  The private key will be generate within the token and
     will not be exportable.  This function will store the DER-encoded
     public key in the SubjectPublicKeyInfo format in 'pubkey' .  The
     'pubkey' should be deinitialized using 'gnutls_free()' .

     Note that when generating an elliptic curve key, the curve can be
     substituted in the place of the bits parameter using the
     'GNUTLS_CURVE_TO_BITS()' macro.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.5

gnutls_pkcs11_privkey_generate3
-------------------------------

 -- Function: int gnutls_pkcs11_privkey_generate3 (const char * URL,
          gnutls_pk_algorithm_t PK, unsigned int BITS, const char *
          LABEL, const gnutls_datum_t * CID, gnutls_x509_crt_fmt_t FMT,
          gnutls_datum_t * PUBKEY, unsigned int KEY_USAGE, unsigned int
          FLAGS)
     URL: a token URL

     PK: the public key algorithm

     BITS: the security bits

     LABEL: a label

     CID: The CKA_ID to use for the new object

     FMT: the format of output params.  PEM or DER

     PUBKEY: will hold the public key (may be 'NULL' )

     KEY_USAGE: One of GNUTLS_KEY_*

     FLAGS: zero or an OR'ed sequence of 'GNUTLS_PKCS11_OBJ_FLAGs'

     This function will generate a private key in the specified by the
     'url' token.  The private key will be generate within the token and
     will not be exportable.  This function will store the DER-encoded
     public key in the SubjectPublicKeyInfo format in 'pubkey' .  The
     'pubkey' should be deinitialized using 'gnutls_free()' .

     Note that when generating an elliptic curve key, the curve can be
     substituted in the place of the bits parameter using the
     'GNUTLS_CURVE_TO_BITS()' macro.

     Since 3.6.3 the objects are marked as sensitive by default unless
     'GNUTLS_PKCS11_OBJ_FLAG_MARK_NOT_SENSITIVE' is specified.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.4.0

gnutls_pkcs11_privkey_get_info
------------------------------

 -- Function: int gnutls_pkcs11_privkey_get_info
          (gnutls_pkcs11_privkey_t PKEY, gnutls_pkcs11_obj_info_t ITYPE,
          void * OUTPUT, size_t * OUTPUT_SIZE)
     PKEY: should contain a 'gnutls_pkcs11_privkey_t' type

     ITYPE: Denotes the type of information requested

     OUTPUT: where output will be stored

     OUTPUT_SIZE: contains the maximum size of the output and will be
     overwritten with actual

     This function will return information about the PKCS 11 private key
     such as the label, id as well as token information where the key is
     stored.  When output is text it returns null terminated string
     although 'output_size' contains the size of the actual data only.

     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
     code on error.

gnutls_pkcs11_privkey_get_pk_algorithm
--------------------------------------

 -- Function: int gnutls_pkcs11_privkey_get_pk_algorithm
          (gnutls_pkcs11_privkey_t KEY, unsigned int * BITS)
     KEY: should contain a 'gnutls_pkcs11_privkey_t' type

     BITS: if bits is non null it will hold the size of the parameters'
     in bits

     This function will return the public key algorithm of a private
     key.

     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
     success, or a negative error code on error.

gnutls_pkcs11_privkey_import_url
--------------------------------

 -- Function: int gnutls_pkcs11_privkey_import_url
          (gnutls_pkcs11_privkey_t PKEY, const char * URL, unsigned int
          FLAGS)
     PKEY: The private key

     URL: a PKCS 11 url identifying the key

     FLAGS: Or sequence of GNUTLS_PKCS11_OBJ_* flags

     This function will "import" a PKCS 11 URL identifying a private key
     to the 'gnutls_pkcs11_privkey_t' type.  In reality since in most
     cases keys cannot be exported, the private key structure is being
     associated with the available operations on the token.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs11_privkey_init
--------------------------

 -- Function: int gnutls_pkcs11_privkey_init (gnutls_pkcs11_privkey_t *
          KEY)
     KEY: A pointer to the type to be initialized

     This function will initialize an private key structure.  This
     structure can be used for accessing an underlying PKCS'11' object.

     In versions of GnuTLS later than 3.5.11 the object is protected
     using locks and a single 'gnutls_pkcs11_privkey_t' can be re-used
     by many threads.  However, for performance it is recommended to
     utilize one object per key per thread.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs11_privkey_set_pin_function
--------------------------------------

 -- Function: void gnutls_pkcs11_privkey_set_pin_function
          (gnutls_pkcs11_privkey_t KEY, gnutls_pin_callback_t FN, void *
          USERDATA)
     KEY: The private key

     FN: the callback

     USERDATA: data associated with the callback

     This function will set a callback function to be used when required
     to access the object.  This function overrides the global set using
     'gnutls_pkcs11_set_pin_function()' .

     *Since:* 3.1.0

gnutls_pkcs11_privkey_status
----------------------------

 -- Function: unsigned gnutls_pkcs11_privkey_status
          (gnutls_pkcs11_privkey_t KEY)
     KEY: Holds the key

     Checks the status of the private key token.

     *Returns:* this function will return non-zero if the token holding
     the private key is still available (inserted), and zero otherwise.

     *Since:* 3.1.9

gnutls_pkcs11_reinit
--------------------

 -- Function: int gnutls_pkcs11_reinit ( VOID)

     This function will reinitialize the PKCS 11 subsystem in gnutls.
     This is required by PKCS 11 when an application uses 'fork()' .
     The reinitialization function must be called on the child.

     Note that since GnuTLS 3.3.0, the reinitialization of the PKCS '11'
     subsystem occurs automatically after fork.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_pkcs11_set_pin_function
------------------------------

 -- Function: void gnutls_pkcs11_set_pin_function (gnutls_pin_callback_t
          FN, void * USERDATA)
     FN: The PIN callback, a 'gnutls_pin_callback_t()' function.

     USERDATA: data to be supplied to callback

     This function will set a callback function to be used when a PIN is
     required for PKCS 11 operations.  See 'gnutls_pin_callback_t()' on
     how the callback should behave.

     *Since:* 2.12.0

gnutls_pkcs11_set_token_function
--------------------------------

 -- Function: void gnutls_pkcs11_set_token_function
          (gnutls_pkcs11_token_callback_t FN, void * USERDATA)
     FN: The token callback

     USERDATA: data to be supplied to callback

     This function will set a callback function to be used when a token
     needs to be inserted to continue PKCS 11 operations.

     *Since:* 2.12.0

gnutls_pkcs11_token_check_mechanism
-----------------------------------

 -- Function: unsigned gnutls_pkcs11_token_check_mechanism (const char *
          URL, unsigned long MECHANISM, void * PTR, unsigned PSIZE,
          unsigned FLAGS)
     URL: should contain a PKCS 11 URL

     MECHANISM: The PKCS '11' mechanism ID

     PTR: if set it should point to a CK_MECHANISM_INFO struct

     PSIZE: the size of CK_MECHANISM_INFO struct (for safety)

     FLAGS: must be zero

     This function will return whether a mechanism is supported by the
     given token.  If the mechanism is supported and 'ptr' is set, it
     will be updated with the token information.

     *Returns:* Non-zero if the mechanism is supported or zero
     otherwise.

     *Since:* 3.6.0

gnutls_pkcs11_token_get_flags
-----------------------------

 -- Function: int gnutls_pkcs11_token_get_flags (const char * URL,
          unsigned int * FLAGS)
     URL: should contain a PKCS 11 URL

     FLAGS: The output flags (GNUTLS_PKCS11_TOKEN_*)

     This function will return information about the PKCS 11 token
     flags.

     The supported flags are: 'GNUTLS_PKCS11_TOKEN_HW' and
     'GNUTLS_PKCS11_TOKEN_TRUSTED' .

     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
     code on error.

     *Since:* 2.12.0

gnutls_pkcs11_token_get_info
----------------------------

 -- Function: int gnutls_pkcs11_token_get_info (const char * URL,
          gnutls_pkcs11_token_info_t TTYPE, void * OUTPUT, size_t *
          OUTPUT_SIZE)
     URL: should contain a PKCS 11 URL

     TTYPE: Denotes the type of information requested

     OUTPUT: where output will be stored

     OUTPUT_SIZE: contains the maximum size of the output buffer and
     will be overwritten with the actual size.

     This function will return information about the PKCS 11 token such
     as the label, id, etc.

     When output is text, a null terminated string is written to
     'output' and its string length is written to 'output_size' (without
     null terminator).  If the buffer is too small, 'output_size' will
     contain the expected buffer size (with null terminator for text)
     and return 'GNUTLS_E_SHORT_MEMORY_BUFFER' .

     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
     code on error.

     *Since:* 2.12.0

gnutls_pkcs11_token_get_mechanism
---------------------------------

 -- Function: int gnutls_pkcs11_token_get_mechanism (const char * URL,
          unsigned int IDX, unsigned long * MECHANISM)
     URL: should contain a PKCS 11 URL

     IDX: The index of the mechanism

     MECHANISM: The PKCS '11' mechanism ID

     This function will return the names of the supported mechanisms by
     the token.  It should be called with an increasing index until it
     return GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE.

     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
     code on error.

     *Since:* 2.12.0

gnutls_pkcs11_token_get_ptr
---------------------------

 -- Function: int gnutls_pkcs11_token_get_ptr (const char * URL, void **
          PTR, unsigned long * SLOT_ID, unsigned int FLAGS)
     URL: should contain a PKCS'11' URL identifying a token

     PTR: will contain the CK_FUNCTION_LIST_PTR pointer

     SLOT_ID: will contain the slot_id (may be 'NULL' )

     FLAGS: should be zero

     This function will return the function pointer of the specified
     token by the URL. The returned pointers are valid until gnutls is
     deinitialized, c.f.  '_global_deinit()' .

     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
     code on error.

     *Since:* 3.6.3

gnutls_pkcs11_token_get_random
------------------------------

 -- Function: int gnutls_pkcs11_token_get_random (const char *
          TOKEN_URL, void * RNDDATA, size_t LEN)
     TOKEN_URL: A PKCS '11' URL specifying a token

     RNDDATA: A pointer to the memory area to be filled with random data

     LEN: The number of bytes of randomness to request

     This function will get random data from the given token.  It will
     store rnddata and fill the memory pointed to by rnddata with len
     random bytes from the token.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs11_token_get_url
---------------------------

 -- Function: int gnutls_pkcs11_token_get_url (unsigned int SEQ,
          gnutls_pkcs11_url_type_t DETAILED, char ** URL)
     SEQ: sequence number starting from 0

     DETAILED: non zero if a detailed URL is required

     URL: will contain an allocated url

     This function will return the URL for each token available in
     system.  The url has to be released using 'gnutls_free()'

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if the sequence number
     exceeds the available tokens, otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_token_init
------------------------

 -- Function: int gnutls_pkcs11_token_init (const char * TOKEN_URL,
          const char * SO_PIN, const char * LABEL)
     TOKEN_URL: A PKCS '11' URL specifying a token

     SO_PIN: Security Officer's PIN

     LABEL: A name to be used for the token

     This function will initialize (format) a token.  If the token is at
     a factory defaults state the security officer's PIN given will be
     set to be the default.  Otherwise it should match the officer's
     PIN.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs11_token_set_pin
---------------------------

 -- Function: int gnutls_pkcs11_token_set_pin (const char * TOKEN_URL,
          const char * OLDPIN, const char * NEWPIN, unsigned int FLAGS)
     TOKEN_URL: A PKCS '11' URL specifying a token

     OLDPIN: old user's PIN

     NEWPIN: new user's PIN

     FLAGS: one of 'gnutls_pin_flag_t' .

     This function will modify or set a user or administrator's PIN for
     the given token.  If it is called to set a PIN for first time the
     oldpin must be 'NULL' .  When setting the admin's PIN with the
     'GNUTLS_PIN_SO' flag, the 'oldpin' value must be provided (this
     requirement is relaxed after GnuTLS 3.6.5 since which the PIN will
     be requested if missing).

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs11_type_get_name
---------------------------

 -- Function: const char * gnutls_pkcs11_type_get_name
          (gnutls_pkcs11_obj_type_t TYPE)
     TYPE: Holds the PKCS 11 object type, a 'gnutls_pkcs11_obj_type_t' .

     This function will return a human readable description of the
     PKCS11 object type 'obj' .  It will return "Unknown" for unknown
     types.

     *Returns:* human readable string labeling the PKCS11 object type
     'type' .

     *Since:* 2.12.0

gnutls_x509_crt_import_pkcs11
-----------------------------

 -- Function: int gnutls_x509_crt_import_pkcs11 (gnutls_x509_crt_t CRT,
          gnutls_pkcs11_obj_t PKCS11_CRT)
     CRT: A certificate of type 'gnutls_x509_crt_t'

     PKCS11_CRT: A PKCS 11 object that contains a certificate

     This function will import a PKCS 11 certificate to a
     'gnutls_x509_crt_t' structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_x509_crt_list_import_pkcs11
----------------------------------

 -- Function: int gnutls_x509_crt_list_import_pkcs11 (gnutls_x509_crt_t
          * CERTS, unsigned int CERT_MAX, gnutls_pkcs11_obj_t * const
          OBJS, unsigned int FLAGS)
     CERTS: A list of certificates of type 'gnutls_x509_crt_t'

     CERT_MAX: The maximum size of the list

     OBJS: A list of PKCS 11 objects

     FLAGS: 0 for now

     This function will import a PKCS 11 certificate list to a list of
     'gnutls_x509_crt_t' type.  These must not be initialized.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

